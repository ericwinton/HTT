var app = new ReadyJS({
    cssPreprocessor: 'less',
    routes: [
        {
            paths: ['/login'],
            component: 'loginView'
        },
        {
            paths: ['/logout'],
            component: 'logoutView'
        },
        {
            paths: ['/', '/customers'],
            component: 'customersView'
        },
        {
            paths: ['/customers/:custId'],
            component: 'customerDetail'
        },
        {
            paths: ['/distributors'],
            component: 'distributorsView'
        },
        {
            paths: ['/distributors/:distId'],
            component: 'distributorDetail'
        },
        {
            paths: ['/installations'],
            component: 'installationsView'
        },
        {
            paths: [
                '/installations/:instId', 
                '/installations/:instId/:instSection',
                '/installations/:instId/:instSection/:instSectionDetailId',
                '/installations/:instId/:instSection/:instSectionDetailId/:ioType'
            ],
            component: 'installationPageTemplate'
        },
        {
            paths: ['/hardware', '/hardware/:hardwareType'],
            component: 'hardwareView'
        },
        {
            paths: ['/users', '/htt-users'],
            component: 'usersView'
        },
        {
            paths: ['/users/:userId', '/htt-users/:userId'],
            component: 'userDetail'
        }
    ],
    data: {
        noProfile: '/assets/images/no-profile.jpg',
        showSignalStrengthModal: false,
        instSections: ['Overview', 'Alarms', 'Logs', 'IO', 'RTU Configs', 'RTU Messages', 'Telemetry Data', 'Legacy Controls'],
        ioTypes: [
            { id: 1, name: 'Analog Input', slug: 'analog-input' },
            { id: 2, name: 'Analog Output', slug: 'analog-output' },
            { id: 3, name: 'Digital Input', slug: 'digital-input' },
            { id: 4, name: 'Digital Output', slug: 'digital-output' },
            { id: 5, name: 'Counter', slug: 'counter' },
            { id: 6, name: 'Pump', slug: 'pump' },
            { id: 7, name: 'Valve', slug: 'valve' },
            { id: 8, name: 'Rain Counter', slug: 'rain-counter' },
            { id: 9, name: 'PLC Register', slug: 'plc-register' },
        ]
    },
    afterRouteChange: () => {
        var user = JSON.parse(sessionStorage.getItem('htt_user'));

        app.data.user = user;

        if (!user && app.url.path !== '/login') {
            app.newRoute('/login');
        }
    }
});
app.components.backLink = ({url, text = 'Back'}) => {
    return {
        template: `
            <p><a class="back-link" href="${url}"><i class="fa fa-chevron-left" aria-hidden="true"></i> ${text}</a></p>
        `,

        styles: `
            .back-link {
                text-decoration: none;
                
                i {
                    font-size: 12px;
                }
            }
        `
    }
}
app.components.breadcrumbs = ({items}) => {
    var bcList = '';

    items.forEach(item => {
        bcLink = (item.url) ? `<a href="${item.url}">${item.text}</a>` : item.text;
        bcList += `<li>${bcLink}</li>`;
    });

    return {
        template: `
            <ul class="list-unstyled list-inline breadcrumbs">
                <li><a href="/"><i class="fa fa-home" aria-hidden="true"></i></a></li>
                ${bcList}
            </ul>
        `,

        styles: `
            .breadcrumbs.list-unstyled {
                font-size: 14px;
                margin-bottom: 30px;

                li {
                    margin-right: 8px;
                }

                li:not(:first-child):before {
                    content: "/";
                    padding-right: 10px;
                }
            }

            @media (max-width: 767px) {
                .breadcrumbs.list-unstyled {
                    margin-bottom: 15px;
                }
            }
        `
    }
};
app.components.customerDetail = () => {
    var customer = app.data.customers.find(cust => cust.id === +app.url.mapped.custId);
    var installations = app.data.installations.filter(inst => inst.customer_id === customer.id);

    app.data.pageTitle = customer.name;

    return {
        template: `
            <div>
                <h1>${customer.name}</h1>

                ${app.render('breadcrumbs', {items: [
                    {text: 'Customers', url: '/customers'},
                    {text: customer.name}
                ]})}

                <h2>Distributor</h2>
                ${app.render('distributorsList', {customer})}

                <h2>Installations</h2>
                ${app.render('installationsList', {installations: installations, customer: customer})}

                <h2>Users</h2>
                <p>${app.render('usersList', {includeCustomer: false})}</p>
            </div>
        `
    }
};
app.components.customersView = () => {
    var rows = '';

    app.data.pageTitle = 'Customers';

    app.data.customers.forEach(cust => {
        var dist = app.data.distributors.find(d => d.id === cust.distributor_id);

        rows += `
            <tr>
                <td><a href="/customers/${cust.id}">${cust.name}</a></td>
                <td><a href="/distributors/${dist.id}">${dist.name}</a></td>
            </tr>
        `;
    });

    return {
        template: `
            <div>
                <h1>Customers</h1>
                ${app.render('table', {headers: ['Name', 'Distributor'], rows: rows})}
            </div>
        `
    }
};
app.components.distributorDetail = () => {
    var dist = app.data.distributors.find(d => d.id === +app.url.mapped.distId);
    var customers = app.data.customers.filter(cust => cust.distributor_id === dist.id);
    var rows = '';

    app.data.pageTitle = dist.name;

    customers.forEach(cust => {
        rows += `
            <tr>
                <td><a href="/customers/${cust.id}">${cust.name}</a></td>
            </tr>
        `
    });

    return {
        template: `
            <div>
                <h1>${dist.name}</h1>
                <table>
                    <thead>
                        <tr>
                            <th>Name</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${rows}
                    </tbody>
                </table>
            </div>
        `
    }
};
app.components.distributorsList = ({customer}) => {
    var distList = '';

    app.data.distributors.forEach(dist => {
        if (!customer || (customer && customer.distributor_id === dist.id)) {
            distList += `<tr><td><a href="/distributors/${dist.id}">${dist.name}</a></td></tr>`;
        }
    });
    
    return {
        template: `
            <div class="distributors-list">
                ${app.render('table', { headers: ['Name'], rows: distList })}
            </div>
        `
    }
};
app.components.distributorsView = () => {
    app.data.pageTitle = 'Distributors';
    
    return {
        template: `
            <div>
                <h1>Distributors</h1>
                ${app.render('distributorsList')};
            </div>
        `
    }
};
app.components.formField = (props) => {
    var input = '';
    var label = props.label ? `<label>${props.label}</label>` : '';
    var name = props.name ? ` name="${props.name}"` : '';
    var type = props.type || 'text';
    var value = props.value || '';
    var placeholder = props.placeholder ? ` placeholder="${placeholder}"` : '';
    var required = (props.required) ? ' required' : '';
    var disabled = (props.disabled) ? ' disabled' : '';
    var events = '';
    var selectedValue = props.selectedValue || '';

    if (props.events) {
        props.events.forEach((ev) => {
            var source = (ev.source) ? `, '${ev.source}'` : '';
            events += ` ${ev.action}="app.run(event, '${ev.function}'${source})"`
        });
    }

    var grouped = `${name}${placeholder}${events}${required}${disabled}`;

    if (type === 'text' || type === 'email' || type === 'password' || type === 'date' || type === 'number' || type === 'datetime-local') {
        input = `<input type="${type}" value="${value}"${grouped}>`;
    } else if (type === 'textarea') {
        input = `<textarea${grouped}>${value}</textarea>`;
    } else if (type === 'select') {
        var options = '';

        props.options.forEach((item) => {
            var selected = (item.value === selectedValue) ? ' selected' : '';
            options += `<option value="${item.value}"${selected}>${item.text}</option>`;
        });

        input = `<select${name}${events}>${options}</select>`;
    } else if (type === 'radio' || type === 'checkbox') {
        var options = '';

        label = '';

        props.options.forEach((item) => {
            var itemEvents = '';

            if (item.events) {
                item.events.forEach((ev) => {
                    var source = (ev.source) ? `, '${ev.source}'` : '';
                    itemEvents += ` ${ev.action}="app.run(event, '${ev.function}'${source})"`
                });
            }

            options += `<label><input type="${type}"${name} value="${item.value}"${itemEvents}> ${item.text}</label>`;
        });

        input = `<fieldset><legend>${props.label}</legend>${options}</fieldset>`;
    }

    return {
        template: `
            <div class="form-group">
                ${label}
                ${input}
            </div>
        `
    }
};
app.components.hardwareView = () => {
    var headers = [];
    var rows = '';

    app.data.pageTitle = 'Hardware';

    if (app.url.mapped.hardwareType === 'rtus') {
        headers = ['Name', 'Model', 'Installation', 'Stackup'];

        app.data.pageTitle = 'RTU Hardware';

        app.data.rtus.forEach(rtu => {
            var installation = app.data.installations.find(inst => inst.id === rtu.installation_id);
            var stackup = app.data.stackups.find(stackup => stackup.id === rtu.id);

            rows += `
                <tr>
                    <td><a href="/hardware/rtus/${rtu.id}">${rtu.name}</a></td>
                    <td>${rtu.model}</td>
                    <td><a href="/installations/${installation.id}">${installation.name}</a></td>
                    <td><a href="/hardware/stackups/${stackup.id}">${stackup.name}</a></td>
                </tr>
            `;
        });
    } else if (app.url.mapped.hardwareType === 'stackups') {
        headers = ['Name', 'Model', 'Installation', 'RTU'];

        app.data.pageTitle = 'Stackup Hardware';

        app.data.stackups.forEach(stackup => {
            var rtu = app.data.rtus.find(rtu => rtu.id === stackup.rtu_id);
            var installation = app.data.installations.find(inst => inst.id === rtu.installation_id);

            rows += `
                <tr>
                    <td><a href="/hardware/stackups/${stackup.id}">${stackup.name}</a></td>
                    <td>${stackup.model}</td>
                    <td><a href="/installation/${installation.id}">${installation.name}</a></td>
                    <td><a href="/hardware/rtus/${rtu.id}">${rtu.name}</a></td>
                </tr>
            `;
        });
    }

    return {
        template: `
            <div>
                <h1>Hardware</h1>
                <p><a href="/hardware/rtus">RTUs</a> | <a href="/hardware/stackups">Stackups</a></p>

                ${app.render('table', {headers: headers, rows: rows})}
            </div>
        `
    }
};
app.components.headerNav = () => {
    var navItemsHtml = '';

    var navItems = [
        { name: 'Installations', url: '/installations' },
        { name: 'Users', url: '/users' },
        { name: '<i class="fa fa-user" aria-hidden="true"></i>', title: 'My Profile', url: `/users/${app.data.user.id}` },
        { name: '<i class="fa fa-sign-out" aria-hidden="true"></i>', title: 'Logout', url: '/logout'}
    ];
    
    if (app.data.user?.role === 'HTT Admin') {
        navItems = [
            { name: 'Distributors', url: '/distributors' },
            { name: 'Customers', url: '/customers' },
            { name: 'Installations', url: '/installations' },
            { name: 'Hardware', url: '/hardware' },
            { name: 'Users', url: '/users' },
            { name: '<i class="fa fa-user" aria-hidden="true"></i>', title: 'My Profile', url: `/users/${app.data.user.id}` },
            { name: '<i class="fa fa-sign-out" aria-hidden="true"></i>', title: 'Logout', url: '/logout'}
        ];
    }

    navItems.forEach(item => {
        var title = (item.title) ? ' title="' + item.title + '"' : '';
        navItemsHtml += `<li><a href="${item.url}"${title}>${item.name}</a></li>`;
    });

    return {
        template: `
            <div class="nav-wrap">
                <div class="nav-toggle"><a class="show-mobile" href="#" onclick="app.run(event, 'toggleNav')"><i class="fa fa-bars" aria-hidden="true"></i></a></div>
                <div class="nav-panel">
                    <p class="close-nav show-mobile"><a href="#" onclick="app.run(event, 'toggleNav')">&times; Close</a></p>
                    <ul class="list-inline list-unstyled list-align-right header-nav">
                        ${navItemsHtml}
                    </ul>
                </div>
            </div>
        `,

        styles: `
            .nav-toggle a {
                text-align: right;
                font-size: 24px;
            }
            
            .header-nav {
                a {
                    color: #000;
                    text-decoration: none;
                }
            }

            @media (max-width: 767px) {
                .close-nav {
                    text-align: right;

                    a {
                        color: #fff;
                        padding: 15px 30px;
                        font-size: 20px;
                    }
                }

                .nav-panel {
                    position: fixed;
                    top: 0;
                    right: 0;
                    left: 0;
                    bottom: 0;
                    background: #335589;
                    display: none;
                    color: #fff;

                    &.open {
                        display: block;
                    }

                    .list-inline.list-align-right li {
                        display: block;
                        margin: 0;

                        a {
                            padding: 15px 30px;
                            display: block;
                            font-size: 20px;
                            color: #fff;
                        }
                    }
                }
            }
        `,

        functions: {
            toggleNav: (e) => {
                e.preventDefault();
                var navPanel = document.querySelector('.nav-panel');

                if (!navPanel.classList.contains('open')) {
                    navPanel.classList.add('open');
                } else {
                    navPanel.classList.remove('open');
                }
            }
        }
    }
};
app.components.header = () => {
    return {
        template: `
            <div class="header grid">
                ${app.render('logoSvg')}
                <div class="header-right">
                    ${app.render('headerNav')}
                </div>
            </div>
        `,

        styles: `
            .header {
                padding-top: 15px;
                padding-bottom: 15px;
                grid-template-columns: 150px auto;
                gap: 30px;
            }
        `
    }
};
app.components.loginView = () => {
    app.data.pageTitle = 'Login';

    return {
        template: `
            <div class="login">
                <p>${app.render('logoSvg')}</p>

                <div class="login-message"></div>

                <form onsubmit="app.run(event, 'login')">
                    <div class="form-group">
                        <label>Email</label>
                        <input type="email" name="email" required>
                    </div>
                    <div class="form-group">
                        <label>Password</label>
                        <input type="password" name="password" required>
                    </div>
                    <button type="submit">Log In</button>
                </form>
            </div>
        `,

        styles: `
            .login {
                width: 360px;
                margin: 0 auto;

                .login-message-error {
                    background: #f1e6e8;
                    padding: 10px;
                    margin-bottom: 15px;
                    border-radius: 4px;
                }
            }
        `,

        functions: {
            login: async (e) => {
                e.preventDefault();
                var email = e.target.querySelector('[name="email"]').value;
                var password = e.target.querySelector('[name="password"]').value;
                var res = await fetch('/scripts/login', {
                    method: 'POST', 
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({email: email, password: password})
                });
                var resJson = await res.json();

                if (resJson.status === 'Success') {
                    var user = resJson.data;
                    var role = app.data.roles.find(r => r.id === user.role_id);
                    user.token = resJson.token;
                    user.role = role.name;
                    sessionStorage.setItem('htt_user', JSON.stringify(user));
                    var homeRoute = (user.customer_id) ? '/installations' : '/customers';
                    app.newRoute(homeRoute);
                } else {
                    document.querySelector('.login-message').innerHTML = '<div class="login-message-error">' + resJson.message + '</div>';
                }
            }
        }
    }
};
app.components.logoSvg = () => {
    var homeUrl = (app.data.user?.customer_id) ? '/installations' : '/';

    return {
        template: `
            <a href="${homeUrl}"><svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 625 185"><title>High Tide Technologies</title><path d="M59.45 98.93c17.027 0 30.83-13.803 30.83-30.83 0-17.027-13.803-30.83-30.83-30.83-17.027 0-30.83 13.803-30.83 30.83 0 17.027 13.803 30.83 30.83 30.83z" fill="#6FB1E4"></path><path d="M194.3 15.26h11.32V121H194.3V74.08h-33.65V121h-11.17V15.26h11.17v48.91h33.65V15.26zm31.46 0h11.16V121h-11.16V15.26zm29.72 22.49c0-7.227 2.387-12.913 7.16-17.06 4.773-4.147 12.137-6.22 22.09-6.22 6.43-.033 12.83.87 19 2.68v10.69a61.751 61.751 0 00-19-3c-6.5 0-11.14 1.13-13.92 3.39-2.78 2.26-4.167 5.64-4.16 10.14v60.55c0 8.487 5.033 12.733 15.1 12.74 6.6 0 11.317-1.1 14.15-3.3V69.05h11.17v46.39a48.794 48.794 0 01-24.38 6.3c-18.14 0-27.21-7.447-27.21-22.34V37.75zm115.28-22.49h11.32V121h-11.32V74.08h-33.65V121h-11.17V15.26h11.17v48.91h33.65V15.26zm94.52 0v9.91h-20.44V121h-11.33V25.17h-20.44v-9.91h52.21zm10.72 0h11.16V121H476V15.26zm31.27 0H535c8.393 0 14.727 2.15 19 6.45 4.273 4.3 6.417 10.063 6.43 17.29v57.88c0 7.44-2.097 13.31-6.29 17.61-4.193 4.3-10.483 6.47-18.87 6.51h-28V15.26zm42 23.91c-.007-9.447-4.99-14.17-14.95-14.17h-15.88v86h15.88c9.96 0 14.94-4.823 14.94-14.47l.01-57.36zm29.56-23.91h45.77v9.91H590v37.59h30.19v9.91H590V111h34.6v10h-45.77V15.26zM54.59 85.282l9.71-.01.049 46.54-9.71.01-.049-46.54z" fill="#182E4F"></path><path d="M82.5 125.84h26.29V10.37h-54.2V.66h63.91v134.89H72.79l9.71-9.71zM36.42 10.37H10.05v115.47h54.28v9.71H.34V.66h45.79l-9.71 9.71z" fill="#182E4F"></path><path d="M83 98.93a44.71 44.71 0 01-26.45-8.6l-1.3-1a35.28 35.28 0 00-27.64-4.82l-1.39.33v-10l.9-.18a45.238 45.238 0 018.76-.86 44.7 44.7 0 0126.44 8.6l1.31.95A35.08 35.08 0 0083 89.15a35.594 35.594 0 008.22-1l1.38-.33v10l-.9.17a44.62 44.62 0 01-8.7.94zM54.59 4.39h9.71v46.54h-9.71V4.39z" fill="#182E4F"></path><path d="M83 62.34a44.78 44.78 0 01-26.45-8.6l-1.28-.93A35.07 35.07 0 0035.91 47a35.47 35.47 0 00-8.26 1l-1.39.33v-10l.9-.17a44.82 44.82 0 0135.2 7.74l1.28.93a35.17 35.17 0 0019.4 5.82 35.594 35.594 0 008.22-1l1.38-.33v10l-.9.18c-2.88.562-5.806.843-8.74.84z" fill="#182E4F"></path><path d="M19.24 183.54V159h-9.07v-3.74h22.88V159H24v24.59l-4.76-.05zm45.54 0v-28.33h19.75V159h-15v8.58H82.9v3.69H69.57v8.63h15v3.69l-19.79-.05zm64.94.46c-4.667 0-8.193-1.273-10.58-3.82-2.387-2.547-3.583-5.993-3.59-10.34a19.432 19.432 0 011.52-8 11.19 11.19 0 014.64-5.2 15.68 15.68 0 018-1.82 24.463 24.463 0 018.32 1.36v4.18a19.972 19.972 0 00-3.76-1.08 22.933 22.933 0 00-4.2-.37c-3.52 0-6.007.94-7.46 2.82-1.45 1.87-2.18 4.59-2.18 8.14 0 3.31.79 5.83 2.38 7.54 1.59 1.71 4 2.58 7.35 2.58a25.693 25.693 0 004.07-.33 19.027 19.027 0 003.85-1v4.23a24.757 24.757 0 01-3.81.88c-1.509.187-3.03.264-4.55.23zm40.87-.46v-28.33h4.8v12.32H189v-12.32h4.8v28.33H189v-12.32h-13.61v12.32h-4.8zm56.68 0v-28.33h4.22l14.78 20.85v-20.85H251v28.33h-4.2l-14.74-20.81v20.81h-4.79zm69.78.46c-4.493 0-7.853-1.18-10.08-3.54-2.227-2.36-3.34-6.027-3.34-11 0-5.16 1.113-8.9 3.34-11.22 2.227-2.32 5.587-3.477 10.08-3.47 4.52 0 7.887 1.157 10.1 3.47s3.32 6.053 3.32 11.22c0 4.96-1.107 8.627-3.32 11-2.213 2.373-5.58 3.553-10.1 3.54zm0-4c2.96 0 5.137-.817 6.53-2.45 1.4-1.62 2.09-4.3 2.09-8 0-3.93-.69-6.68-2.09-8.25-1.4-1.57-3.57-2.35-6.53-2.35-2.96 0-5.1.78-6.49 2.35-1.39 1.57-2.09 4.32-2.09 8.25 0 3.727.697 6.393 2.09 8 1.44 1.57 3.56 2.39 6.49 2.39v.06zm45.95 3.54v-28.33h4.8v24.64h14.52v3.69H343zm62.25.46c-4.493 0-7.853-1.18-10.08-3.54-2.227-2.36-3.34-6.027-3.34-11 0-5.16 1.113-8.9 3.34-11.22 2.227-2.32 5.587-3.477 10.08-3.47 4.507 0 7.87 1.157 10.09 3.47 2.22 2.313 3.33 6.053 3.33 11.22 0 4.96-1.11 8.627-3.33 11-2.22 2.373-5.583 3.553-10.09 3.54zm0-4c2.96 0 5.137-.817 6.53-2.45 1.393-1.633 2.09-4.3 2.09-8 0-3.933-.697-6.683-2.09-8.25-1.393-1.567-3.57-2.35-6.53-2.35-2.94 0-5.103.783-6.49 2.35-1.4 1.57-2.09 4.32-2.09 8.25 0 3.73.69 6.41 2.09 8 1.4 1.59 3.55 2.39 6.49 2.39v.06zm59.17 4c-4.667 0-8.177-1.26-10.53-3.78-2.353-2.52-3.537-5.927-3.55-10.22a19.632 19.632 0 011.54-8.08 11.36 11.36 0 014.69-5.25 15.515 15.515 0 018-1.85 28.632 28.632 0 014.55.33c1.315.172 2.613.457 3.88.85v4.14a23.13 23.13 0 00-8-1.32c-3.61 0-6.13.95-7.59 2.86s-2.17 4.65-2.17 8.23c0 3.253.76 5.73 2.28 7.43 1.53 1.7 3.89 2.56 7.09 2.56a17.77 17.77 0 006.11-.88V168h4.09v13.64a14.817 14.817 0 01-3.89 1.61 24.056 24.056 0 01-6.5.75zm42.91-.46v-28.33h4.79v28.33h-4.79zm38.23 0v-28.33h19.76V159h-15v8.58h13.33v3.69h-13.29v8.63h15v3.69l-19.8-.05zm59.8.46a23.342 23.342 0 01-8.85-1.4v-4.23c1.325.486 2.686.871 4.07 1.15a22.12 22.12 0 004.34.44c1.73.089 3.46-.184 5.08-.8a3.12 3.12 0 001.69-3.16 3.64 3.64 0 00-.7-2.34 5.538 5.538 0 00-2.33-1.51 37.156 37.156 0 00-4.49-1.35c-3.047-.787-5.19-1.787-6.43-3a6.78 6.78 0 01-1.84-5 6.992 6.992 0 012.72-5.85c1.82-1.41 4.54-2.11 8.14-2.11a29.784 29.784 0 014.65.35c1.157.165 2.298.429 3.41.79v4.23a20.643 20.643 0 00-7.4-1.28 11.649 11.649 0 00-4.92.84 2.993 2.993 0 00-1.359 1.219 2.993 2.993 0 00-.401 1.781c-.035.739.18 1.468.61 2.07a4.724 4.724 0 002.14 1.36c1 .38 2.41.81 4.2 1.28a18.998 18.998 0 015.39 2.09 7.002 7.002 0 012.68 2.82 8.345 8.345 0 01.77 3.63 6.985 6.985 0 01-.664 3.275 6.993 6.993 0 01-2.106 2.595c-1.84 1.407-4.64 2.11-8.4 2.11z" fill="#469BE0"></path></svg></a>
        `
    }
};
app.components.logoutView = () => {
    return {
        template: `
            <div>Logging out...</div>
        `,

        onFirstRender: async () => {
            const res = await fetch('/scripts/logout', { method: 'POST' });
            const resJson = await res.json();
            
            if (resJson.status === 'Success') {
                sessionStorage.removeItem('htt_user');
                app.data.user = null;
                app.newRoute('/login', 'replace');
            }
        }
    }
};
app.components.modal = (props) => {
    var modalHeader = (props.header) ? `<h3>${props.header}</h3>` : '';

    return {
        template: `
            <div class="modal">
                <div class="modal-card">
                    <a href="#" onclick="app.run(event, 'closeModal')" class="close-modal">&times;</a>
                    ${modalHeader}
                    ${props.body}
                </div>
            </div>
        `,

        styles: `
            .modal {
                position: fixed;
                top: 0;
                right: 0;
                left: 0;
                bottom: 0;
                padding: 100px 15px 15px 15px;
                background-color: rgba(0,0,0,.8);
                opacity: 0;
                display: none;
                transition: .3s;
                overflow: auto;

                &.open {
                    align-items: center;
                    opacity: 1;
                }

                .modal-card {
                    background: #fff;
                    border-radius: 4px;
                    width: 800px;
                    max-width: 100%;
                    margin: 0 auto;
                    padding: 15px;
                    position: relative;

                    h3 {
                        border-bottom: 1px solid #ccc;
                        padding-bottom: 15px;
                    }

                    .close-modal {
                        width: 30px;
                        height: 30px;
                        background: #000;
                        color: #fff;
                        border-radius: 50%;
                        line-height: 30px;
                        text-align: center;
                        font-size: 24px;
                        box-shadow: 0 0 10px rgba(0,0,0,.5);
                        position: absolute;
                        top: -10px;
                        right: -10px;
                        text-decoration: none;
                    }
                }
            }
        `,

        functions: {
            closeModal: (e) => {
                e.preventDefault();
                app.update(props.toggleKey, false);
            }
        },

        onFirstRender: () => {
            document.querySelector('.modal').style.display = 'block';

            setTimeout(() => {
                document.querySelector('.modal').classList.add('open');
            });
        }
    }
};
app.components.root = () => {
    var header = (app.route.component === 'loginView') ? '' : app.render('header');

    return {
        template: `
            <div class="container">
                ${header}
                ${app.render('route')}
            </div>
        `,

        onFirstRender: () => {
            document.title = app.data.pageTitle + ' | HTT SCADA';
        },

        styles: `
            * {
                box-sizing: border-box;
            }
            body {
                padding: 0;
                margin: 0;
                font-family: Arial;
            }

            a {
                color: #4e6e9d;
            }

            h2, h3, h4 {
                margin-top: 0;
            }

            h1 {
                font-size: 26px;
            }

            h2 {
                font-size: 22px;
            }

            .container {
                width: 1200px;
                max-width: 100%;
                margin: 0 auto;
                padding-left: 15px;
                padding-right: 15px;

                &-sm {
                    width: 400px;
                }
            }

            .table-wrap {
                overflow: auto;
                box-shadow: 0 0 10px rgba(0,0,0,.2);
                margin-bottom: 30px;
            }

            table {
                width: 100%;
                border-collapse: collapse;

                thead {
                    background: #f5f5f5;
                }

                th, td {
                    padding: 10px;
                    text-align: left;
                    white-space: nowrap;
                }
            }

            .grid {
                display: grid;
            }

            .grid-1-3 {
                grid-template-columns: 1fr 3fr;
                gap: 30px;
            }

            li {
                margin-bottom: 5px;
            }
            
            .list-unstyled {
                list-style: none;
                padding: 0;
                margin: 0;
            }

            .list-inline {
                li {
                    display: inline-block;
                    margin-right: 15px;
                }
            }

            .list-inline.list-align-right {
                text-align: right;

                li {
                    margin-left: 15px;
                    margin-right: 0;
                }
            }

            .form-group {
                margin-bottom: 15px;
            }

            .btn {
                background: #459ce0;
                color: #fff;
                padding: 10px 15px;
                border-radius: 4px;
                border: none;
                text-transform: uppercase;
                cursor: pointer;
            }

            label,
            legend {
                display: block;
                font-size: 14px;
                margin-bottom: 4px;
                font-weight: bold;
            }

            fieldset {
                border: none;
                padding: 0;
                margin: 0;
            }

            input[type="text"],
            input[type="email"],
            input[type="number"],
            input[type="password"],
            input[type="date"],
            input[type="datetime-local"],
            select {
                width: 100%;
                border-radius: 4px;
                min-height: 34px;
                padding: 0 5px;
                border: 1px solid #ccc;
                font-family: 'Arial';
            }

            .input-inline {
                width: auto;
            }

            .rounded {
                border-radius: 50%;
            }

            .color-green {
                color: green;
            }

            .form-container {
                width: 500px;
                max-width: 100%;
            }

            .show-mobile {
                display: none;
            }

            .hide-mobile {
                display: block;
            }

            @media (max-width: 767px) {
                .grid-1-3 {
                    grid-template-columns: auto;
                    gap: 15px;
                    display: block;
                }

                .show-mobile {
                    display: block;
                }

                .hide-mobile {
                    display: none;
                }
            }
        `
    }
};
app.components.signalStrengthChart = (props) => {
    return {
        template: `
            <canvas id="ss-chart"></canvas>
        `,

        styles: `
            #ss-chart {
                width: 100%;
            }
        `,

        onFirstRender: () => {
            var s = document.createElement('script');
            s.src = 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js';
            s.onload = () => {
                var xValues = ['7/28', '7/29', '7/30', '7/31', '8/1'];
                var yValues = [-68, -62, -64, -72, -68];

                new Chart("ss-chart", {
                    type: "line",
                    data: {
                        labels: xValues,
                        datasets: [{
                            fill: false,
                            lineTension: 0,
                            backgroundColor: "rgba(0,0,0,1.0)",
                            borderColor: "rgba(0,0,0,0.1)",
                            data: yValues
                        }]
                    },
                    options: {
                        legend: {display: false}
                    }
                });
            };
            document.body.append(s);
        }
    }
};
app.components.subnav = ({items}) => {
    var subnavList = '';
    var subnavOptions = '';

    items.forEach(item => {
        var active = (item.active) ? ' class="active"' : '';
        var selected = (item.active) ? ' selected' : '';
        subnavList += `<li${active}><a href="${item.url}">${item.text}</a></li>`;
        subnavOptions += `<option value="${item.url}"${selected}>${item.text}</option>`;
    });

    return {
        template: `
            <div class="subnav-wrap">
                <ul class="list-unstyled subnav hide-mobile">
                    ${subnavList}
                </ul>
                <div class="form-group show-mobile">
                    <label>Sections</label>
                    <select onchange="app.run(event, 'changeSubnavRoute')">
                        ${subnavOptions}
                    </select>
                </div>
            </div>
        `,

        styles: `
            .subnav {
                a {
                    display: block;
                    background: #f5f5f5;
                    border-radius: 4px;
                    padding: 10px;
                    color: #000;
                    text-decoration: none;
                }

                li.active {
                    a {
                        background: #459ce0;
                        color: #fff;
                    }
                }
            }
        `,

        functions: {
            changeSubnavRoute: (e) => {
                app.newRoute(e.target.value);
            }
        }
    }
};
app.components.table = (props) => {
    var headers = '';

    props.headers.forEach(h => {
        headers += `<th>${h}</th>`;
    });

    return {
        template: `
            <div class="table-wrap">
                <table>
                    <thead><tr>${headers}</tr></thead>
                    <tbody>${props.rows}</tbody>
                </table>
            </div>
        `
    }
};
app.components.userDetail = () => {
    var user = app.data.users.find(u => u.id === +app.url.mapped.userId);
    var roleOptions = '';
    var profilePic = (user.image) ? user.image : app.data.noProfile;
    var customerField = '';

    app.data.pageTitle = user.first_name + ' ' + user.last_name;

    if (!app.data.user.customer_id) {
        var customerOptions = '';

        app.data.customers.forEach((cust) => {
            var selected = (cust.id === user.customer_id) ? ' selected' : '';
            customerOptions += `<option value="${cust.id}"${selected}>${cust.name}</option>`;
        });

        customerField = `
            <div class="form-group">
                <label>Customer</label>
                <select name="customer_id" required>
                    ${customerOptions}
                </select>
            </div>
        `;
    }

    app.data.roles.forEach((role) => {
        var selected = (role.id === user.role_id) ? ' selected' : '';
        roleOptions += `<option value="${role.id}"${selected}>${role.name}</option>`;
    });

    return {
        template: `
            <div>
                <h1>${user.first_name} ${user.last_name}</h1>

                ${app.render('breadcrumbs', {items: [
                    {text: 'Users', url: '/users'},
                    {text: `${user.first_name} ${user.last_name}`}
                ]})}

                <div class="form-container">

                    <form>
                        <div class="form-group">
                            <a href="#" onclick="app.run(event, 'editProfilePic')"><img class="profile-pic-lg rounded" src="${profilePic}"></a>
                            <input type="file" name="upload_profile_pic" class="upload-profile-pic" onchange="app.run(event, 'uploadProfilePic')">
                        </div>
                        <div class="form-group">
                            <label>First Name *</label>
                            <input type="text" name="first_name" value="${user.first_name}" required>
                        </div>
                        <div class="form-group">
                            <label>First Name *</label>
                            <input type="text" name="last_name" value="${user.last_name}" required>
                        </div>
                        <div class="form-group">
                            <label>Email *</label>
                            <input type="email" name="email" value="${user.email}" required>
                        </div>
                        <div class="form-group">
                            <label>Phone</label>
                            <input type="text" name="phone" value="${user.phone}">
                        </div>
                        <div class="form-group">
                            <label>Role *</label>
                            <select name="role_id" required>
                                ${roleOptions}
                            </select>
                        </div>
                        ${customerField}
                        <button type="submit" class="btn">Save</button>
                    </form>
                </div>
            </div>
        `,

        styles: `
            .profile-pic-lg {
                width: 120px;
            }
            .upload-profile-pic {
                display: none;
            }
        `,

        functions: {
            editProfilePic: (e) => {
                e.preventDefault();
                document.querySelector('.upload-profile-pic').click();
            },

            uploadProfilePic: (e) => {
                e.preventDefault();
                alert('Uploading Profile Pic...');
            }
        }
    }
};
app.components.usersList = ({ includeCustomer }) => {
    var rows = '';
    var users = (app.data.user.customer_id) ? app.data.users.filter(u => u.customer_id === app.data.user.customer_id) 
        : (app.url.mapped.custId) ? app.data.users.filter(u => u.customer_id === +app.url.mapped.custId) 
        : app.data.users;
    var showCustomer = (includeCustomer !== null && includeCustomer !== undefined) ? includeCustomer : (app.data.user.customer_id) ? false : true;
    var headers = ['Name', 'Username', 'Email', 'Phone', 'Role'];

    users.forEach((user, i) => {
        var role = app.data.roles.find(r => r.id === user.role_id);
        var customerCell = '';

        if (showCustomer) {
            var customer = (user.customer_id) ? app.data.customers.find(c => c.id === user.customer_id) : null;
            customerCell = (customer) ? `<td><a href="/customers/${customer.id}">${customer.name}</a></td>` : '<td>-</td>';
        }

        if (i === 0 && showCustomer) {
            headers.push('Customer');
        }

        rows += `
            <tr>
                <td><a href="/users/${user.id}">${user.first_name} ${user.last_name}</a></td>
                <td>${user.username}</td>
                <td>${user.email}</td>
                <td>${user.phone}</td>
                <td>${role.name}</td>
                ${customerCell}
            </tr>
        `;
    });

    return {
        template: `
            <div class="users-list">
                ${app.render('table', {headers: headers, rows: rows})}
            </div>
        `
    }
};
app.components.usersView = () => {
    app.data.pageTitle = 'Users';
    
    return {
        template: `
            <div>
                <h1>Users</h1>
                ${app.render('usersList')}
            </div>
        `
    }
};
app.components.instAlarmsDetail = () => {
    var alarm = app.data.alarms.find(a => a.id === +app.url.mapped.instSectionDetailId);
    var inst = app.data.installations.find(inst => inst.id === +app.url.mapped.instId);
    var cust = app.data.customers.find(cust => cust.id === inst.customer_id);
    var acknowledgedBy = '';
    
    if (alarm.ack_user_id) {
        var ackUser = app.data.users.find(u => u.id === alarm.ack_user_id);
        acknowledgedBy = '<p><strong>Acknowledged By</strong>: ' + ackUser.first_name + ' ' + ackUser.last_name + '</p>';
    }

    return {
        template: `
            <div>
                ${app.render('backLink', {url: `/installations/${app.url.mapped.instId}/alarms`})}

                <h2>${alarm.name}</h2>

                <p><strong>Time</strong>: ${alarm.created}</p>

                ${acknowledgedBy}
            </div>
        `
    }
};
app.components.instAlarms = ({inst}) => {
    var alarms = app.data.alarms.filter(a => a.installation_id === inst.id);
    var rows = '';

    alarms.forEach(a => {
        var acknowledgedBy = '';
        
        if (a.ack_user_id) {
            var ackUser = app.data.users.find(u => u.id === a.ack_user_id);
            acknowledgedBy = ackUser.first_name + ' ' + ackUser.last_name;
        }
        
        rows += `
            <tr>
                <td><a href="/installations/${inst.id}/alarms/${a.id}">${a.name}</a></td>
                <td>${a.created}</td>
                <td>${acknowledgedBy}</td>
            </tr>
        `;
    });

    return {
        template: `
            <div>
                <h2>Alarms</h2>
                <table>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Time</th>
                            <th>Acknowledged</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${rows}
                    </tbody>
                </table>
            </div>
        `
    }
};
app.components.instIODetail = ({ioName}) => {
    var io = app.data.io.find(io => io.id === +app.url.mapped.instSectionDetailId);
    var ioHeader = ioName || io.name;
    var ioOptions = '';

    app.data.ioTypes.forEach((type) => {
        var selected = (type.id === io.type_id) ? ' selected' : '';
        ioOptions += `<option value="${type.id}"${selected}>${type.name}</option>`;
    });

    app.data.pageTitle = io.name + ' | IO';

    return {
        template: `
            <div class="io-detail">
                ${app.render('backLink', {url: `/installations/${app.url.mapped.instId}/io`})}

                <h2>${ioHeader}</h2>

                <div class="form-container">
                    <form>
                        <div class="form-group">
                            <label>Name</label>
                            <input type="text" value="${io.name}" onkeyup="app.run(event, 'updateIOName')">
                        </div>

                        <div class="form-group">
                            <label>Type</label>
                            <select name="type">
                                ${ioOptions}
                            </select>
                        </div>

                        <div class="form-group">
                            <label>Location</label>
                            <input type="number" value="${io.location}">
                        </div>

                        <button type="submit" class="btn">Save</button>
                    </form>
                </div>
            </div>
        `,

        functions: {
            updateIOName: (e) => {
                app.render('instIODetail', {ioName: e.target.value}, e.target.closest('.io-detail'));
            }
        }
    }
};
app.components.instIO = ({inst}) => {
    var headers = ['Name', 'Type', 'Location'];
    var rows = '';
    var io = app.data.io.filter(io => inst.id === io.installation_id);

    io.forEach(io => {
        var ioType = app.data.ioTypes.find(type => type.id === io.type_id);

        rows += `
            <tr>
                <td><a href="/installations/${inst.id}/io/${io.id}">${io.name}</a></td>
                <td>${ioType.name}</td>
                <td>${io.location}</td>
            </tr>
        `;
    });

    return {
        template: `
            <div>
                <h2>IO</h2>
                <p><i class="fa fa-plus-circle color-green" aria-hidden="true"></i> <a href="/installations/${inst.id}/io/new">New IO</a></p>
                ${app.render('table', {headers, rows})}
            </div>
        `
    }
};
app.components.instLegacyControls = ({inst}) => {
    return {
        template: `
            <h2>Legacy Controls</h2>
        `
    }
};
app.components.instLogs = ({inst}) => {
    return {
        template: `
            <h2>Logs</h2>
        `
    }
};
app.components.instNewIO = ({inst}) => {
    var formFields = '';
    var selectedIOType = app.url.mapped.ioType || null;
    var ioOptions = '';
    var ioOpts = [{ text: 'Select IO Type', value: '' }];
    var newText = 'New IO';
    var selectedIoValue = '';

    app.data.ioTypes.forEach(type => {
        var selected = (selectedIOType === type.slug) ? ' selected' : '';
        selectedIoValue = type.value;
        newText = (selected) ? 'New ' + type.name : newText;
        ioOpts.push({text: type.name, value: type.slug});
        ioOptions += `<option value="${type.slug}"${selected}>${type.name}</option>`;
    });

    app.data.pageTitle = `${newText} | ${inst.name}`;

    if (selectedIOType) {
        formFields += `
            <div class="form-group">
                <label>Name</label>
                <input type="text" name="name" required>
            </div>
        `;


        if (selectedIOType === 'analog-input') {
            formFields += `
                ${app.render('formField', {label: 'Units', name: 'units', required: true})}
                ${app.render('formField', {label: 'Assigned Location', type: 'number', name: 'location', required: true})}
                ${app.render('formField', {label: 'PLC', type: 'checkbox', name: 'plc', required: true, options: [
                    { text: 'Yes', value: true, events: [ { action: 'onclick', function: 'togglePlc', source: 'instNewIO' } ]}
                ]})}
                ${app.render('formField', {label: 'Slot', type: 'number', name: 'slot', disabled: true})}
                ${app.render('formField', {label: 'Sensor Type', type: 'select', name: 'sensor_type', required: true, options: [
                    { text: 'Current', value: 'current' },
                    { text: 'Voltage', value: 'voltage' },
                    { text: 'Scale', value: 'scale' },
                    { text: 'Expansion', value: 'expansion' },
                    { text: 'Decimal', value: 'decimal' },
                    { text: 'Alarm as Digital', value: 'alarm-as-digital' },
                ]})}
                ${app.render('formField', {label: 'Resistor (Ohms)', type: 'number', name: 'resitor'})}
                ${app.render('formField', {label: 'High Val (in above units)', type: 'number', name: 'high_val_units'})}
                ${app.render('formField', {label: 'Low Val (in above units)', type: 'number', name: 'low_val_units'})}
                ${app.render('formField', {label: 'High Val (4 - 20)', type: 'number', name: 'high_val'})}
                ${app.render('formField', {label: 'Low Val (4 - 20)', type: 'number', name: 'low_val'})}
                ${app.render('formField', {label: 'Offset', type: 'number', name: 'offset'})}
                ${app.render('formField', {label: 'Precision Level', type: 'number', name: 'precision_level'})}
                ${app.render('formField', {label: 'Maximum Display Value', type: 'number', name: 'max_display_value'})}
                ${app.render('formField', {label: 'Minimum Display Value', type: 'number', name: 'min_display_value'})}
            `;
        } else if (selectedIOType === 'analog-output') {
            formFields += `
                ${app.render('formField', {label: 'Units', name: 'units', required: true})}
                ${app.render('formField', {label: 'Output', type: 'number', name: 'output', required: true})}
                ${app.render('formField', {label: 'PLC', type: 'checkbox', name: 'plc', required: true, options: [
                    { text: 'Yes', value: true, events: [ { action: 'onclick', function: 'togglePlc', source: 'instNewIO' } ]}
                ]})}
                ${app.render('formField', {label: 'Slot', type: 'number', name: 'slot', disabled: true})}
                ${app.render('formField', {label: 'High Val', type: 'number', name: 'high_val'})}
                ${app.render('formField', {label: 'Low Val', type: 'number', name: 'low_val'})}
                ${app.render('formField', {label: 'Max Val', type: 'number', name: 'max_val'})}
                ${app.render('formField', {label: 'Min Val', type: 'number', name: 'min_val'})}
            `;
        } else if (selectedIOType === 'digital-input') {
            formFields += `
                ${app.render('formField', {label: 'Input', type: "number", name: 'input', required: true})}
                ${app.render('formField', {label: 'PLC', type: 'checkbox', name: 'plc', required: true, options: [
                    { text: 'Yes', value: true, events: [ { action: 'onclick', function: 'togglePlc', source: 'instNewIO' } ]}
                ]})}
                ${app.render('formField', {label: 'Slot', type: 'number', name: 'slot', disabled: true})}
                ${app.render('formField', {label: 'Closed Text', name: 'closed_text'})}
                ${app.render('formField', {label: 'Open Text', name: 'open_text'})}
                ${app.render('formField', {label: 'Alarm Polarity', type: 'radio', name: 'alarm_polarity', required: true, options: [
                    { text: 'Alarm on closed', value: 'closed' },
                    { text: 'Alarm on open', value: 'open' },
                ]})}
                ${app.render('formField', {label: 'Alarm Action', type: 'select', name: 'alarm_action', required: true, options: [
                    { text: 'Alarm', value: 'alarm' },
                    { text: 'Alert', value: 'alert' },
                    { text: 'Report', value: 'report' },
                    { text: 'Disabled', value: 'disabled' },
                ]})}
            `;
        } else if (selectedIOType === 'digital-output') {
            formFields += `
                ${app.render('formField', {label: 'Output', name: 'output', required: true})}
                ${app.render('formField', {label: 'PLC', type: 'checkbox', name: 'plc', required: true, options: [
                    { text: 'Yes', value: true, events: [ { action: 'onclick', function: 'togglePlc', source: 'instNewIO' } ]}
                ]})}
                ${app.render('formField', {label: 'Slot', type: 'number', name: 'slot', disabled: true})}
                ${app.render('formField', {label: 'Call on text', name: 'call_on_text'})}
                ${app.render('formField', {label: 'Call off text', name: 'call_off_text'})}
                ${app.render('formField', {label: 'Call Polarity', type: 'radio', name: 'call_polarity', required: true, options: [
                    { text: 'Closed', value: 'closed' },
                    { text: 'Open', value: 'open' },
                ]})}
                ${app.render('formField', {label: 'Pulse', type: 'checkbox', name: 'pulse', required: true, options: [
                    { text: 'Yes', value: true, events: [ { action: 'onclick', function: 'togglePulse', source: 'instNewIO' } ]}
                ]})}
                ${app.render('formField', {label: 'Pulse Duration (in 1/8s of a second)', name: 'pulse_duration', disabled: true})}
            `;
        }

        formFields += `
            <button type="submit" class="btn">Create</button>
        `;
    }

    return {
        template: `
            <div>
                <h2>New IO</h2>

                <div class="form-container">
                    <form onsubmit="app.run(event, 'createIO')">
                        ${app.render('formField', {label: 'IO Type', type: 'select', name: 'type', required: true, options: ioOpts, value: selectedIoValue, events: [{ action: 'onchange', function: 'changeIOType', source: 'instNewIO' }]})}
                        ${formFields}
                    </div>
                </div>
            </div>
        `,

        functions: {
            changeIOType: (e) => {
                app.newRoute(`/installations/${inst.id}/io/new/${e.target.value}`);
            },
            
            createIO: (e) => {
                e.preventDefault();
                alert('Creating IO');
            },

            togglePlc: (e) => {
                var checked = e.target.checked;
                var slotInput = document.querySelector('[name="slot"]');
                
                if (checked) {
                    slotInput.disabled = false;
                    slotInput.required = true;
                } else {
                    slotInput.disabled = true;
                    slotInput.required = false;
                }
            },

            togglePulse: (e) => {
                var checked = e.target.checked;
                var pulseDurationInput = document.querySelector('[name="pulse_duration"]');
                
                if (checked) {
                    pulseDurationInput.disabled = false;
                    pulseDurationInput.required = true;
                } else {
                    pulseDurationInput.disabled = true;
                    pulseDurationInput.required = false;
                }
            }
        }
    }
};
app.components.instOverview = ({inst}) => {
    var signalStrengthModal = '';

    if (app.data.showSignalStrengthModal) {
        var ssHtml = app.render('signalStrengthChart', { installation: inst });
        signalStrengthModal = app.render('modal', { header: 'Signal Strength Readings', body: ssHtml, toggleKey: 'showSignalStrengthModal' });
    }

    return {
        watch: ['showSignalStrengthModal'],

        template: `
            <div>
                <h2>Overview</h2>
                <table width="100%">
                    <tr><td>Name</td><td>${inst.name}</td></tr>
                    <tr><td>Address</td><td>${inst.address} ${inst.city}, ${inst.state} ${inst.zip}</td></tr>
                    <tr><td>RTU Model</td><td>${inst.rtu_model}</td></tr>
                    <tr><td>Signal Strength</td><td>${inst.signal_strength} dB (<a href="#" onclick="app.run(event, 'viewSignalStrength')">View History</a>)</td></tr>
                </table>
                ${signalStrengthModal}
            </div>
        `,

        functions: {
            viewSignalStrength: (e) => {
                e.preventDefault();
                app.update('showSignalStrengthModal', true);
            }
        }
    }
};
app.components.instRTUConfigs = ({inst}) => {
    return {
        template: `
            <h2>RTU Configs</h2>
        `
    }
};
app.components.instRTUMessages = ({inst}) => {
    return {
        template: `
            <h2>RTU Messages</h2>
        `
    }
};
app.components.instTelemetryData = ({inst}) => {
    return {
        template: `
            <h2>Telemetry Data</h2>
        `
    }
};
app.components.installationPageTemplate = () => {
    var inst = app.data.installations.find(cust => cust.id === +app.url.mapped.instId);
    var cust = app.data.customers.find(cust => cust.id === inst.customer_id);
    var subnavItems = [];
    var sectionSlug = (app.url.path.indexOf('/io') === 0) ? 'io' 
        : (app.url.path.indexOf('/alarms') === 0) ? 'alarms' 
        : (app.url.mapped.instSection) ? app.url.mapped.instSection 
        : 'overview';
    var currentSection = app.data.instSections.find(section => section.toLowerCase().replace(/ /g, '-') === sectionSlug);
    var isDetail = (app.url.mapped.instSectionDetailId) ? 'Detail' : '';
    var component = (app.url.mapped.instSectionDetailId === 'new') ? 'instNewIO' : 'inst' + currentSection.replace(/ /g, '') + isDetail;
    var bcItems = [
        {text: 'Installations', url: '/installations'},
        {text: inst.name}
    ];

    app.data.pageTitle = currentSection + ' | ' + inst.name;

    if (!app.data.user.customer_id) {
        bcItems = [
            {text: 'Customers', url: '/customers/' + inst.customer_id},
            {text: cust.name, url: '/customers/' + cust.id},
            {text: inst.name}
        ];
    }

    app.data.instSections.forEach(item => {
        var active = (item === currentSection) ? true : false;
        subnavItems.push({text: item, url: `/installations/${inst.id}/${item.toLowerCase().replace(/ /g, '-')}`, active: active});
    });

    return {
        template: `
            <div>
                <h1>${inst.name}</h1>
                ${app.render('breadcrumbs', {items: bcItems})}
                <div class="grid grid-1-3">
                    ${app.render('subnav', {items: subnavItems})}
                    <div>
                        ${app.render(component, {inst: inst})}
                    </div>
                </div>
            </div>
        `
    }
};
app.components.installationsList = (props) => {
    var headers = (props.includeCustomer) ? ['Name', 'Customer', 'Location', 'Status'] : ['Name', 'Location', 'Status'];
    var rows = '';

    props.installations.forEach(inst => {
        var customer = (props.customer) ? props.customer : null;
        var customerCell = '';
        var statusIcon = (inst.has_active_alarm) ? 'bell' : 'check';

        if (props.includeCustomer) {
            customer = app.data.customers.find(cust => cust.id === inst.customer_id);
            customerCell = `<td><a href="/customers/${customer.id}">${customer.name}</a></td>`;
        }

        rows += `
            <tr>
                <td><a href="/installations/${inst.id}">${inst.name}</a></td>
                ${customerCell}
                <td>${inst.city}, ${inst.state}</td>
                <td class="alarm-status"><i class="fa fa-${statusIcon}" aria-hidden="true"></i></td>
            </tr>
        `;
    });

    return {
        template: `
            <div class="installations-list">
                ${app.render('table', { headers, rows })}
            </div>
        `,

        styles: `
            .alarm-status {
                .fa-bell {
                    color: #c70000;
                }

                .fa-check {
                    color: green;
                }
            }
        `
    }
};
app.components.installationsView = () => {
    var includeCustomer = (app.data.user.role === 'HTT Admin');
    var installations = (app.data.user.customer_id) ? app.data.installations.filter(inst => inst.customer_id === app.data.user.customer_id) : app.data.installations;

    app.data.pageTitle = 'Installations';

    return {
        template: `
            <div>
                <h1>Installations</h1>
                ${app.render('installationsList', {installations: installations, includeCustomer: includeCustomer, customerId: app.data.user.customer_id})}
            </div>
        `
    }
};
app.data.alarms = [
    {
        id: 1,
        name: 'High Level Alarm',
        installation_id: 1,
        ack_user_id: 2,
        created: '2022-07-28 12:00:00'
    }
];
app.data.customers = [
    {
        id: 1,
        name: 'Customer 1',
        distributor_id: 1,
        timezone: 'America/Chicago'
    },
    {
        id: 2,
        name: 'Customer 2',
        distributor_id: 1,
        timezone: 'America/Chicago'
    },
    {
        id: 3,
        name: 'Customer 3',
        distributor_id: 1,
        timezone: 'America/Chicago'
    },
    {
        id: 4,
        name: 'Customer 4',
        distributor_id: 2,
        timezone: 'America/Chicago'
    },
    {
        id: 5,
        name: 'Customer 5',
        distributor_id: 3,
        timezone: 'America/Chicago'
    }
];
app.data.distributors = [
    {
        id: 1,
        name: 'Distributor 1'
    },
    {
        id: 2,
        name: 'Distributor 2'
    },
    {
        id: 3,
        name: 'Distributor 3'
    }
];
app.data.httRoles = [
    {
        id: 1,
        name: 'Admin',
        slug: 'admin',
        permissions: ['all']
    },
    {
        id: 2,
        name: 'Viewer',
        slug: 'viewer',
        permissions: ['view-content']
    }
];
app.data.httUsers = [
    {
        id: 1,
        first_name: 'Eric',
        last_name: 'Winton',
        username: 'ewinton',
        email: 'eric.winton@htt.io',
        phone: '(555) 555-5555',
        role_id: 1,
        image: 'https://avatars.githubusercontent.com/u/7229881'
    }
];
app.data.installations = [
    {
        id: 1,
        name: 'Installation 1',
        customer_id: 1,
        address: '123 Main St',
        city: 'Nashville',
        state: 'TN',
        zip: '37203',
        timezone: 'America/Chicago',
        power_mode: 'A/C',
        signal_strength: -68,
        rtu_model: '1100_A',
        has_active_alarm: false,
    },
    {
        id: 2,
        name: 'Installation 2',
        customer_id: 1,
        address: '456 Cedar Ln',
        city: 'Nashville',
        state: 'TN',
        zip: '37203',
        timezone: 'America/Chicago',
        power_mode: 'A/C',
        signal_strength: -68,
        rtu_model: '1100_A',
        has_active_alarm: false,
    },
    {
        id: 3,
        name: 'Installation 3',
        customer_id: 1,
        address: '789 Oak St',
        city: 'Nashville',
        state: 'TN',
        zip: '37203',
        timezone: 'America/Chicago',
        power_mode: 'A/C',
        signal_strength: -68,
        rtu_model: '1100_A',
        has_active_alarm: true,
    },
    {
        id: 4,
        name: 'Installation 4',
        customer_id: 2,
        address: '123 Wide St',
        city: 'Nashville',
        state: 'TN',
        zip: '37203',
        timezone: 'America/Chicago',
        power_mode: 'A/C',
        signal_strength: -68,
        rtu_model: '1100_A',
        has_active_alarm: false,
    },
    {
        id: 5,
        name: 'Installation 5',
        customer_id: 2,
        address: '456 Long Ave',
        city: 'Nashville',
        state: 'TN',
        zip: '37203',
        timezone: 'America/Chicago',
        power_mode: 'A/C',
        signal_strength: -68,
        rtu_model: '1100_A',
        has_active_alarm: false,
    },
    {
        id: 6,
        name: 'Installation 6',
        customer_id: 3,
        address: '789 Spring St',
        city: 'Nashville',
        state: 'TN',
        zip: '37203',
        timezone: 'America/Chicago',
        power_mode: 'A/C',
        signal_strength: -68,
        rtu_model: '1100_A',
        has_active_alarm: false,
    },
    {
        id: 7,
        name: 'Installation 7',
        customer_id: 3,
        address: '123 Meadow Ln',
        city: 'Nashville',
        state: 'TN',
        zip: '37203',
        timezone: 'America/Chicago',
        power_mode: 'A/C',
        signal_strength: -68,
        rtu_model: '1100_A',
        has_active_alarm: true,
    },
    {
        id: 8,
        name: 'Installation 8',
        customer_id: 4,
        address: '456 First St',
        city: 'Nashville',
        state: 'TN',
        zip: '37203',
        timezone: 'America/Chicago',
        power_mode: 'A/C',
        signal_strength: -68,
        rtu_model: '1100_A',
        has_active_alarm: false,
    },
    {
        id: 9,
        name: 'Installation 9',
        customer_id: 4,
        address: '789 Seconds St',
        city: 'Nashville',
        state: 'TN',
        zip: '37203',
        timezone: 'America/Chicago',
        power_mode: 'A/C',
        signal_strength: -68,
        rtu_model: '1100_A',
        has_active_alarm: false,
    },
    {
        id: 10,
        name: 'Installation 10',
        customer_id: 5,
        address: '123 Third St',
        city: 'Nashville',
        state: 'TN',
        zip: '37203',
        timezone: 'America/Chicago',
        power_mode: 'A/C',
        signal_strength: -68,
        rtu_model: '1100_A',
        has_active_alarm: false,
    }
];
app.data.io = [
    {
        id: 1,
        name: 'Analog Input 1',
        type_id: 1,
        sensor_type: 'Current',
        installation_id: 1,
        location: 0,
    },
    {
        id: 2,
        name: 'Analog Input 2',
        type_id: 1,
        sensor_type: 'Current',
        installation_id: 1,
        location: 1,
    },
    {
        id: 3,
        name: 'Pump 1',
        type_id: 3,
        open_text: 'Pump 1 Off',
        closed_text: 'Pump 1 On',
        installation_id: 1,
        location: 0,
    },
    {
        id: 4,
        name: 'Pump 2',
        type_id: 3,
        open_text: 'Pump 2 Off',
        closed_text: 'Pump 2 On',
        installation_id: 1,
        location: 1,
    },
    {
        id: 5,
        name: 'High Level Alarm',
        type_id: 3,
        open_text: 'High Level OK',
        closed_text: 'High Level Alarm',
        installation_id: 1,
        location: 2,
    },
    {
        id: 6,
        name: 'Low Level Alarm',
        type_id: 3,
        open_text: 'Low Level OK',
        closed_text: 'Low Level Alarm',
        installation_id: 1,
        location: 3,
    }
];
app.data.permissions = [
    {
        id: 1,
        name: 'All',
        slug: 'all'
    },
    {
        id: 2,
        name: 'Create Content',
        slug: 'create-content'
    },
    {
        id: 3,
        name: 'Edit Content',
        slug: 'edit-content'
    },
    {
        id: 4,
        name: 'Delete Content',
        slug: 'delete-content'
    },
    {
        id: 5,
        name: 'View Content',
        slug: 'view-content'
    },
    {
        id: 6,
        name: 'Add Users',
        slug: 'add-users'
    },
    {
        id: 7,
        name: 'Edit Users',
        slug: 'edit-users'
    },
    {
        id: 8,
        name: 'Delete Users',
        slug: 'delete-users'
    },
];
app.data.roles = [
    {
        id: 1,
        name: 'HTT Admin',
        slug: 'htt-admin',
        permissions: ['all']
    },
    {
        id: 2,
        name: 'Admin',
        slug: 'admin',
        permissions: ['all']
    },
    {
        id: 3,
        name: 'Supervisor',
        slug: 'supervisor',
        permissions: ['edit-content']
    },
    {
        id: 4,
        name: 'Operator',
        slug: 'operator',
        permissions: ['edit-content']
    },
    {
        id: 5,
        name: 'Viewer',
        slug: 'viewer',
        permissions: ['view-content']
    }
];
app.data.rtus = [
    {
        id: 1,
        name: 'RTU 1',
        model: '1100_A',
        installation_id: 1
    },
    {
        id: 2,
        name: 'RTU 2',
        model: '1100_A',
        installation_id: 2
    },
    {
        id: 3,
        name: 'RTU 3',
        model: '1100_A',
        installation_id: 3
    }
];
app.data.stackups = [
    {
        id: 1,
        name: 'Stackup 1',
        model: '1100',
        rtu_id: 1
    },
    {
        id: 2,
        name: 'Stackup 2',
        model: '1100',
        rtu_id: 2
    },
    {
        id: 3,
        name: 'Stackup 3',
        model: '1100',
        rtu_id: 3
    }
];
app.data.users = [
    {
        id: 1,
        first_name: 'Eric',
        last_name: 'Winton',
        username: 'ewinton',
        email: 'eric.winton@htt.io',
        phone: '(555) 555-5555',
        role_id: 1,
        image: 'https://avatars.githubusercontent.com/u/7229881'
    },
    {
        id: 2,
        first_name: 'Alex',
        last_name: 'Admin',
        username: 'alexadmin',
        email: 'alex.admin@gmail.com',
        phone: '(555) 555-5555',
        role_id: 2,
        customer_id: 1,
    },
    {
        id: 3,
        first_name: 'Suzie',
        last_name: 'Supervisor',
        username: 'suziesupervisor',
        email: 'suzie.supervisor@gmail.com',
        phone: '(555) 555-5555',
        role_id: 3,
        customer_id: 3,
    },
    {
        id: 4,
        first_name: 'Olaf',
        last_name: 'Operator',
        username: 'olafoperator',
        email: 'olaf.operator@gmail.com',
        phone: '(555) 555-5555',
        role_id: 4,
        customer_id: 2,
    },
    {
        id: 5,
        first_name: 'Vicky',
        last_name: 'Viewer',
        username: 'vickyviewer',
        email: 'vicky.viewer@gmail.com',
        phone: '(555) 555-5555',
        role_id: 5,
        customer_id: 1,
    }
];
var app = new ReadyJS({
    cssPreprocessor: 'less',
    routes: [
        {
            paths: ['/login'],
            component: 'loginView'
        },
        {
            paths: ['/logout'],
            component: 'logoutView'
        },
        {
            paths: ['/', '/customers'],
            component: 'customers',
            httRoute: true
        },
        {
            paths: ['/customers/new'],
            component: 'newCustomer',
            httRoute: true
        },
        {
            paths: [
                '/customers/:custId', 
                '/customers/:custId/users', 
                '/customers/:custId/installations',
                '/customers/:custId/installations/new',
                '/customers/:custId/installations/map',
            ],
            component: 'custPageTemplate',
            httRoute: true
        },
        {
            paths: ['/distributors'],
            component: 'distributors',
            httRoute: true
        },
        {
            paths: ['/distributors/new'],
            component: 'newDistributor',
            httRoute: true
        },
        {
            paths: ['/distributors/:distId'],
            component: 'distributorDetail',
            httRoute: true
        },
        {
            paths: ['/installations'],
            component: 'installations'
        },
        {
            paths: ['/installations/new'],
            component: 'newInstallation',
            httRoute: true
        },
        {
            paths: [
                '/installations/:instId', 
                '/installations/:instId/io/:ioType', 
                '/installations/:instId/io/:ioType/:ioId', 
                '/installations/:instId/:instSection',
                '/installations/:instId/:instSection/:instDetailId', 
            ],
            component: 'instPageTemplate'
        },
        {
            paths: ['/alarms'],
            component: 'instAlarms'
        },
        {
            paths: ['/alarms/:alarmId'],
            component: 'instAlarmDetail'
        },
        {
            paths: ['/logs'],
            component: 'instLogs',
            httRoute: true
        },
        {
            paths: ['/logs/:logId'],
            component: 'instLogDetail',
            httRoute: true
        },
        {
            paths: ['/rtu-configs'],
            component: 'instRtuConfigs',
            httRoute: true
        },
        {
            paths: ['/rtu-messages'],
            component: 'instRtuMessages',
            httRoute: true
        },
        {
            paths: ['/telemetry-data'],
            component: 'instTelemetryData',
            httRoute: true
        },
        {
            paths: ['/legacy-controls'],
            component: 'instLegacyControls',
            httRoute: true
        },
        {
            paths: ['/hardware', '/hardware/:hardwareType'],
            component: 'hardware',
            httRoute: true
        },
        {
            paths: ['/hardware/:hardwareType/new'],
            component: 'newHardware',
            httRoute: true
        },
        {
            paths: ['/hardware/:hardwareType/:hardwareId'],
            component: 'hardwareDetail',
            httRoute: true
        },
        {
            paths: ['/users'],
            component: 'users'
        },
        {
            paths: ['/users/new'],
            component: 'usersNew',
            httRoute: true
        },
        {
            paths: ['/users/:userId'],
            component: 'userDetail'
        },
        {
            paths: ['/404'],
            component: 'pageNotFound'
        }
    ],
    data: {
        noProfile: '/assets/images/no-profile.jpg',
    },
    functions: {
        isHTT: () => {
            if (app.data.user.customer) { return false; }
        },
        get: async (collection, filters = {}, options = {}) => {
            var res = await app.functions.getRes(collection, filters, options);
            app.data[collection + 'TotalCount'] = res.totalCount;
            return res.data;
        },
        getRes: async (collection, filters = {}, options = {}) => {
            var queryString = '';
            var queryOptions = '';
            var i = 0;

            for (var key in filters) {
                queryString += (i === 0) ? '?' + key + '=' + filters[key] : '&' + key + '=' + filters[key];
                i++;
            }

            for (var key in options) {
                queryOptions += (!queryString) ? '?_' + key + '=' + options[key] : '&_' + key + '=' + options[key];
                i++;
            }

            var res = await fetch('/api/' + collection + queryString + queryOptions);
            var resJson = await res.json();

            return resJson;
        },
        getOne: async (collection, filters, options) => {
            var results = await app.functions.get(collection, filters, options);
            return results[0] || {};
        },
        getById: async (collection, id, options) => {
            var queryOptions = '';

            for (var key in options) {
                queryOptions += (!queryOptions) ? '?_' + key + '=' + options[key] : '&_' + key + '=' + options[key];
            }

            try {
                var res = await fetch('/api/' + collection + '/' + id + queryOptions);
                var resJson = await res.json();
                return resJson.data;
            } catch(err) {
                return {};
            }
        },
        toCamelCase: (str) => {
            return str.replace(/-([a-z])/g, function (g) { return g[1].toUpperCase(); });
        },
        toast: (message, status = 'Success') => {
            app.components.toast().functions.open(message, status);
        },
        loadStylesheets: (stylesheets) => {
            stylesheets.forEach(ssSrc => {
                if (!document.querySelector('link[href="' + ssSrc + '"]')) {
                    var ss = document.createElement('link');
                    ss.rel = 'stylesheet';
                    ss.href = ssSrc;
                    document.head.appendChild(ss);
                }
            });
        },
        loadScripts: (scripts) => {
            return new Promise((resolve, reject) => {
                var index = 0;

                function loaded() {
                    console.log('loaded');
                    index++;

                    if (index < scripts.length) {
                        console.log('load the next');
                        loadScript(scripts[index]);
                    } else {
                        console.log('calling back');
                        resolve();
                    }
                }

                function loadScript(scriptSrc) {
                    console.log('loading ', scriptSrc);
                    if (document.querySelector('script[src="' + scriptSrc + '"]')) {
                        console.log('exists: ', scriptSrc);
                        loaded();
                    } else {
                        console.log('does not exist: ', scriptSrc);
                        var s = document.createElement('script');
                        s.src = scriptSrc;
                        s.onload = () => {
                            loaded();
                        };
                        document.body.appendChild(s);
                    }
                }

                loadScript(scripts[0]);
            });
        }
    },
    afterRouteChange: () => {
        var user = JSON.parse(sessionStorage.getItem('htt_user'));

        app.data.user = user;

        if (!user && app.url.path !== '/login') {
            app.newRoute('/login');
        }
        
        if (!app.route || app.route.httRoute && app.data.user.customer) {
            app.newRoute('/404');
        }
    }
});
app.components.pageNotFound = () => {
    app.data.pageTitle = '404 - Page Not Found';

    return {
        template: `
            <h1>${app.data.pageTitle}</h1>
        `,
    }
}
app.components.backLink = ({url, text = 'Back'}) => {
    return {
        template: `
            <p><a class="back-link" href="${url}"><i class="fa fa-chevron-left" aria-hidden="true"></i> ${text}</a></p>
        `,

        styles: `
            .back-link {
                text-decoration: none;
                
                i {
                    font-size: 12px;
                }
            }
        `
    }
}
app.components.btnGroup = ({align, items, newBtnUrl}) => {
    var alignClass = (align === 'left') ? '' : ' list-align-right';
    var btns = '';
    var newBtn = '';
    
    if (items) {
        items.forEach(item => {
            var icon = (item.icon) ? `<i class="fa fa-${item.icon}" aria-hidden="true"></i> ` : '';
            
            btns += `<li><a class="btn btn-sm" href="${item.url}">${icon}${item.text}</a></li>`;
        });
    }

    if (newBtnUrl) {
        newBtn = app.render('newBtn', {url: newBtnUrl});
    }

    return {
        template: `
            <ul class="btn-group list-inline list-unstyled${alignClass}">
                ${btns}
                ${newBtn}
            </ul>
        `,

        styles: `
            .btn-group {
                .btn, li {
                    margin-bottom: 0;
                }
            }
        `
    }
}
app.components.formField = (props) => {
    var input = '';
    var name = props.name ? ` name="${props.name}"` : '';
    var type = props.type || 'text';
    var value = props.value || '';
    var placeholder = props.placeholder ? ` placeholder="${placeholder}"` : '';
    var required = (props.required) ? ' required' : '';
    var requiredLabel = (props.required) ? ' *' : '';
    var disabled = (props.disabled) ? ' disabled' : '';
    var events = '';
    var label = props.label ? `<label>${props.label}${requiredLabel}</label>` : '';

    if (props.events) {
        props.events.forEach((ev) => {
            var source = (ev.source) ? `, '${ev.source}'` : '';
            events += ` ${ev.action}="app.run(event, '${ev.function}'${source})"`
        });
    }

    var grouped = `${name}${placeholder}${events}${required}${disabled}`;

    if (type === 'text' || type === 'email' || type === 'password' || type === 'date' || type === 'number' || type === 'datetime') {
        var step = (type === 'number') ? ' step="any"': '';
        var type = (type === 'datetime') ? 'datetime-local' : type;
        input = `<input type="${type}" value="${value}"${grouped}${step}>`;
    } else if (type === 'textarea') {
        input = `<textarea${grouped}>${value}</textarea>`;
    } else if (type === 'select') {
        var options = '<option value="">Select...</option>';

        if (props.options) {
            props.options.forEach((item) => {
                var selected = (item.value === value) ? ' selected' : '';
                options += `<option value="${item.value}"${selected}>${item.text}</option>`;
            });

            input = `<select${name}${events}>${options}</select>`;
        }
    } else if (type === 'radio' || type === 'checkbox') {
        var options = '';

        label = '';

        if (props.options) {
            props.options.forEach((item) => {
                var itemEvents = '';
                var checked = (value == item.value) ? ' checked' : '';

                if (item.events) {
                    item.events.forEach((ev) => {
                        var source = (ev.source) ? `, '${ev.source}'` : '';
                        itemEvents += ` ${ev.action}="app.run(event, '${ev.function}'${source})"`
                    });
                }

                options += `<label><input type="${type}"${name} value="${item.value}"${itemEvents}${disabled}${checked}> ${item.label}</label>`;
            });

            input = `<fieldset><legend>${props.label}</legend>${options}</fieldset>`;
        }
    } else if (type === 'relationship') {
        var relResults = '';
        var removeResult = `<a href="#" onclick="app.run(event, 'removeResult')"><i class="fa fa-times" aria-hidden="true"></i></a>`;
        var relatedIds = [];
        var relRequired = (value) ? '' : ' required';

        // TODO: Combine
        console.log(value);
        if (value.id) {
            // new form - related item
            if (props.rel_type.indexOf('to-one') > -1) {
                var relDisplayKeyArray = props.rel_display_key.split(' ');
                var displayTitle = '';

                relDisplayKeyArray.forEach(key => {
                    displayTitle += (displayTitle) ? ' ' + value[key] : value[key];
                });

                relatedIds = [value.id];
                relResults += `<li>${removeResult} ${displayTitle}</li>`;
            } else if (props.rel_type.indexOf('to-many') > -1) {
                value.forEach(rec => {
                    var relDisplayKeyArray = props.rel_display_key.split(' ');
                    var relDisplayTitle = '';

                    relDisplayKeyArray.forEach(key => {
                        relDisplayTitle += (relDisplayTitle) ? ' ' + rec[key] : rec[key];
                    });

                    relatedIds.push(rec.id);
                    relResults = `<li>${removeResult} ${relDisplayTitle}</li>`;
                });
            }
        } else if (value) {
            // new form
            if (props.rel_type.indexOf('to-one') > -1) {
                relatedIds = [value];
            } else if (props.rel_type.indexOf('to-many') > -1) {
                value.forEach(recId => {
                    relatedIds.push(recId);
                });
            }
        }

        input = `
            <div class="relationship-group">
                <input type="hidden" value="${relatedIds.join(',')}"${name}>
                <input type="text" value="" data-rel-model="${props.rel_model}" data-rel-display-key="${props.rel_display_key}" onkeydown="app.run(event, 'keydown')" onkeyup="app.run(event, 'keyup')" placeholder="Search..."${disabled}${relRequired}>
                <ul class="list-inline list-unstyled related-results">
                    ${relResults}
                </ul>
            </div>
        `;
    } else if (type === 'file') {
        input = (value) ? `<a href="#" onclick="app.run(event, 'uploadFile')"><img class="image-preview" src="${value}" alt=""></a>` : '<input type="file">';
    }

    return {
        template: `
            <div class="form-group">
                ${label}
                ${input}
            </div>
        `,

        styles: `
            .relationship-group {
                position: relative;
                
                .autocomplete-results {
                    position: absolute;
                    background: #fff;
                    box-shadow: 0 0 10px rgba(0,0,0,.2);
                    top: 30px;
                    z-index: 10;

                    li {
                        margin: 0;

                        &.active a {
                            background: @primary;
                            color: #fff;
                        }

                        &.no-results {
                            padding: 8px;
                        }
                    }

                    a {
                        display: block;
                        padding: 8px;
                        text-decoration: none;
                    }
                }
            }
            .related-results {
                li {
                    padding: 5px;
                    border-radius: 4px;
                    background: #eee;
                    font-size: 14px;
                    margin-top: 5px;
                    font-size: 13px;
                }
            }

            .image-preview {
                max-height: 160px;
            }
        `,

        functions: {
            removeResult: (e) => {
                e.preventDefault();
                app.render('formField', props);
            },

            uploadFile: (e) => {
                e.preventDefault();
                alert('uploading...');
            },

            selectItem: async (e, selectedItem) => {
                e.preventDefault();

                var item = selectedItem || e.target;
                var formGroup = e.target.closest('.form-group');
                var displayInput = formGroup.querySelector('input[type="text"]');
                var relModel = displayInput.dataset.relModel;
                var itemId = item.closest('li').dataset.id;
                var relItem = await app.functions.getById(relModel, itemId);

                props.value = relItem;

                app.render('formField', props, formGroup);

                displayInput.required = false;
                displayInput.value = '';
                displayInput.focus();
            },

            keydown: (e) => {
                if (e.keyCode === 13) {
                    var formGroup = e.target.closest('.form-group');
                    var selectedItem = formGroup.querySelector('.autocomplete-results li.active a');
                    app.components.formField(props).functions.selectItem(e, selectedItem);
                }
            },

            keyup: async (e) => {
                if (e.keyCode === 40 || e.keyCode === 38) {
                    var formGroup = e.target.closest('.form-group');
                    var acResultsDiv = formGroup.querySelector('.autocomplete-results');
                    
                    if (acResultsDiv) {
                        e.preventDefault();

                        var activeResult = acResultsDiv.querySelector('li.active');
                        var activeResultIndex = (activeResult) ? +activeResult.dataset.index : -1;
                        var acResults = acResultsDiv.querySelectorAll('li');
                        var acResultsLength = acResults.length;
                        var nextResult;

                        if (e.keyCode === 40) {
                            // down
                            nextResult = (activeResultIndex === acResultsLength - 1) ? acResults[0] : acResults[activeResultIndex + 1];
                        } else if (e.keyCode === 38) {
                            // up
                            nextResult = (activeResultIndex === 0) ? acResults[acResultsLength - 1] : acResults[activeResultIndex - 1];
                        }

                        acResults.forEach(item => {
                            item.classList.remove('active');
                        });

                        nextResult.classList.add('active');
                    }
                } else {
                    clearTimeout(app.data.typingTimer);

                    app.data.typingTimer = setTimeout(async () => {
                        var input = e.target;
                        var q = input.value;
                        var relModel = input.dataset.relModel;
                        var relDisplayKey = input.dataset.relDisplayKey;
                        var relGroup = input.closest('.relationship-group');
                        var resultsDiv = relGroup.querySelector('.autocomplete-results');

                        if (q.length > 1) {
                            var res = await app.functions.get(relModel, {name: '*' + q + '*'});
                            var results = '';

                            if (!resultsDiv) {
                                resultsDiv = document.createElement('ul');
                                resultsDiv.className = 'autocomplete-results list-unstyled remove-on-click';
                                relGroup.appendChild(resultsDiv);
                            }

                            if (res.length) {
                                res.forEach((item, i) => {
                                    results += `<li data-index="${i}" data-id="${item.id}"><a href="#" onclick="app.run(event, 'selectItem')">${item[relDisplayKey]}</a></li>`;
                                });

                                resultsDiv.innerHTML = results;
                            } else {
                                resultsDiv.innerHTML = '<li class="no-results">No results</li>';
                            }
                        } else {
                            if (resultsDiv) {
                                resultsDiv.remove();
                            }
                        }
                    }, 500);
                }
            }
        }
    }
};
app.components.form = ({model, data, type}) => {
    if (!app.models[model]) { return {template: `<p>Model not found: ${model}</p>`} } ;

    var formFields = '';
    var thisModel = app.models[model];
    var parentModel = (thisModel.extends) ? app.models[thisModel.extends] : null;
    var parentModelFields = parentModel?.fields || [];
    var fields = thisModel.fields;
    var allFields = parentModelFields.concat(fields);
    var type = type || 'new';
    var method = (type === 'edit') ? 'PUT' : 'POST';

    allFields.forEach(field => {
        if (!field.disabled) {
            var fieldVal = '';
            var fieldProps = {};
            
            if (data) {
                fieldVal = (field.type === 'relationship' || data[field.name] !== undefined) ? data[field.name] : '';
                fieldProps = { value: fieldVal };
            }

            for (var key in field) {
                fieldProps[key] = field[key];
            }

            formFields += app.render('formField', fieldProps);
        }
    });

    return {
        template: `
            <form onsubmit="app.run(event, 'save')" method="${method}">
                ${formFields}
                <button type="submit" class="btn">Save</button>
            </form>
        `,

        functions: {
            save: async (e) => {
                e.preventDefault();
                var form = e.target;
                var formData = new FormData(form);
                var saveData = {};
                var method = form.getAttribute('method');
                var idPath = (data.id) ? '/' + data.id : '';
    
                formData.forEach((value, key) => saveData[key] = value);
    
                var res = await fetch('/api/' + model + idPath, {
                    method: method,
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(saveData)
                });
    
                var resJson = await res.json();
    
                if (resJson.status === 200) {
                    if (app.url.pathArray[1] === 'new' || app.url.pathArray[2] === 'new') {
                        app.newRoute('/' + model + '/' + resJson.data.id);
                    } else {
                        app.functions.toast('Item Saved', 'Success');
                    }
                } else {
                    app.functions.toast(resJson.message, 'Error');
                }
            }
        },

        onFirstRender: async (el) => {
            // pre-fill all related fields
            var relFields = document.querySelectorAll('input[type="hidden"]');
            var relData = data;

            for (var i = 0; i < relFields.length; i++) {
                var field = relFields[i];
                var ids = field.value.split(',');
                var group = field.closest('.relationship-group');
                var displayField = group.querySelector('input[type="text"]');
                var relModel = displayField.dataset.relModel;

                for (var i = 0; i < ids.length; i++) {
                    var id = ids[i];
                    var record = await app.functions.getById(relModel, id);
                    relData[field.name] = record;
                }
            }

            app.render('form', {model: model, data: relData}, el);
        },
    }
}
app.components.loginView = () => {
    app.data.pageTitle = 'Login';

    return {
        template: `
            <div class="login">
                <p>${app.render('logoSvg')}</p>
                <br /><br />

                <div class="login-message"></div>

                <form onsubmit="app.run(event, 'login')">
                    <div class="form-group">
                        <label>Email</label>
                        <input type="email" name="email" required>
                    </div>
                    <div class="form-group">
                        <label>Password</label>
                        <input type="password" name="password" required>
                    </div>
                    <button type="submit">Log In</button>
                </form>
            </div>
        `,

        styles: `
            .login {
                width: 360px;
                margin: 15px auto;

                .login-message-error {
                    background: #f1e6e8;
                    padding: 10px;
                    margin-bottom: 15px;
                    border-radius: 4px;
                }
            }
        `,

        functions: {
            login: async (e) => {
                e.preventDefault();
                var email = e.target.querySelector('[name="email"]').value;
                var password = e.target.querySelector('[name="password"]').value;
                var res = await fetch('/scripts/login', {
                    method: 'POST', 
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({email: email, password: password})
                });
                var resJson = await res.json();

                if (resJson.status === 'Success') {
                    var user = resJson.data;
                    //var role = await app.functions.getById('roles', user.role);
                    //var perms = [];

                    //for (var i = 0; i < role.permissions.length; i++) {
                    //    var permId = role.permissions[i];
                    //    var perm = await app.functions.getById('permissions', permId);
                    //    perms.push(perm);
                    //}

                    user.token = resJson.token;
                    //user.role = role;
                    //user.permissions = perms;
                    sessionStorage.setItem('htt_user', JSON.stringify(user));
                    var homeRoute = (user.customer?.id) ? '/installations' : '/customers';
                    app.newRoute(homeRoute);
                } else {
                    document.querySelector('.login-message').innerHTML = '<div class="login-message-error">' + resJson.message + '</div>';
                }
            }
        }
    }
};
app.components.logoSvg = () => {
    var homeUrl = (app.data.user?.customer?.id) ? '/installations' : '/';

    return {
        template: `
            <a href="${homeUrl}"><svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 625 185"><title>High Tide Technologies</title><path d="M59.45 98.93c17.027 0 30.83-13.803 30.83-30.83 0-17.027-13.803-30.83-30.83-30.83-17.027 0-30.83 13.803-30.83 30.83 0 17.027 13.803 30.83 30.83 30.83z" fill="#6FB1E4"></path><path d="M194.3 15.26h11.32V121H194.3V74.08h-33.65V121h-11.17V15.26h11.17v48.91h33.65V15.26zm31.46 0h11.16V121h-11.16V15.26zm29.72 22.49c0-7.227 2.387-12.913 7.16-17.06 4.773-4.147 12.137-6.22 22.09-6.22 6.43-.033 12.83.87 19 2.68v10.69a61.751 61.751 0 00-19-3c-6.5 0-11.14 1.13-13.92 3.39-2.78 2.26-4.167 5.64-4.16 10.14v60.55c0 8.487 5.033 12.733 15.1 12.74 6.6 0 11.317-1.1 14.15-3.3V69.05h11.17v46.39a48.794 48.794 0 01-24.38 6.3c-18.14 0-27.21-7.447-27.21-22.34V37.75zm115.28-22.49h11.32V121h-11.32V74.08h-33.65V121h-11.17V15.26h11.17v48.91h33.65V15.26zm94.52 0v9.91h-20.44V121h-11.33V25.17h-20.44v-9.91h52.21zm10.72 0h11.16V121H476V15.26zm31.27 0H535c8.393 0 14.727 2.15 19 6.45 4.273 4.3 6.417 10.063 6.43 17.29v57.88c0 7.44-2.097 13.31-6.29 17.61-4.193 4.3-10.483 6.47-18.87 6.51h-28V15.26zm42 23.91c-.007-9.447-4.99-14.17-14.95-14.17h-15.88v86h15.88c9.96 0 14.94-4.823 14.94-14.47l.01-57.36zm29.56-23.91h45.77v9.91H590v37.59h30.19v9.91H590V111h34.6v10h-45.77V15.26zM54.59 85.282l9.71-.01.049 46.54-9.71.01-.049-46.54z" fill="#182E4F"></path><path d="M82.5 125.84h26.29V10.37h-54.2V.66h63.91v134.89H72.79l9.71-9.71zM36.42 10.37H10.05v115.47h54.28v9.71H.34V.66h45.79l-9.71 9.71z" fill="#182E4F"></path><path d="M83 98.93a44.71 44.71 0 01-26.45-8.6l-1.3-1a35.28 35.28 0 00-27.64-4.82l-1.39.33v-10l.9-.18a45.238 45.238 0 018.76-.86 44.7 44.7 0 0126.44 8.6l1.31.95A35.08 35.08 0 0083 89.15a35.594 35.594 0 008.22-1l1.38-.33v10l-.9.17a44.62 44.62 0 01-8.7.94zM54.59 4.39h9.71v46.54h-9.71V4.39z" fill="#182E4F"></path><path d="M83 62.34a44.78 44.78 0 01-26.45-8.6l-1.28-.93A35.07 35.07 0 0035.91 47a35.47 35.47 0 00-8.26 1l-1.39.33v-10l.9-.17a44.82 44.82 0 0135.2 7.74l1.28.93a35.17 35.17 0 0019.4 5.82 35.594 35.594 0 008.22-1l1.38-.33v10l-.9.18c-2.88.562-5.806.843-8.74.84z" fill="#182E4F"></path><path d="M19.24 183.54V159h-9.07v-3.74h22.88V159H24v24.59l-4.76-.05zm45.54 0v-28.33h19.75V159h-15v8.58H82.9v3.69H69.57v8.63h15v3.69l-19.79-.05zm64.94.46c-4.667 0-8.193-1.273-10.58-3.82-2.387-2.547-3.583-5.993-3.59-10.34a19.432 19.432 0 011.52-8 11.19 11.19 0 014.64-5.2 15.68 15.68 0 018-1.82 24.463 24.463 0 018.32 1.36v4.18a19.972 19.972 0 00-3.76-1.08 22.933 22.933 0 00-4.2-.37c-3.52 0-6.007.94-7.46 2.82-1.45 1.87-2.18 4.59-2.18 8.14 0 3.31.79 5.83 2.38 7.54 1.59 1.71 4 2.58 7.35 2.58a25.693 25.693 0 004.07-.33 19.027 19.027 0 003.85-1v4.23a24.757 24.757 0 01-3.81.88c-1.509.187-3.03.264-4.55.23zm40.87-.46v-28.33h4.8v12.32H189v-12.32h4.8v28.33H189v-12.32h-13.61v12.32h-4.8zm56.68 0v-28.33h4.22l14.78 20.85v-20.85H251v28.33h-4.2l-14.74-20.81v20.81h-4.79zm69.78.46c-4.493 0-7.853-1.18-10.08-3.54-2.227-2.36-3.34-6.027-3.34-11 0-5.16 1.113-8.9 3.34-11.22 2.227-2.32 5.587-3.477 10.08-3.47 4.52 0 7.887 1.157 10.1 3.47s3.32 6.053 3.32 11.22c0 4.96-1.107 8.627-3.32 11-2.213 2.373-5.58 3.553-10.1 3.54zm0-4c2.96 0 5.137-.817 6.53-2.45 1.4-1.62 2.09-4.3 2.09-8 0-3.93-.69-6.68-2.09-8.25-1.4-1.57-3.57-2.35-6.53-2.35-2.96 0-5.1.78-6.49 2.35-1.39 1.57-2.09 4.32-2.09 8.25 0 3.727.697 6.393 2.09 8 1.44 1.57 3.56 2.39 6.49 2.39v.06zm45.95 3.54v-28.33h4.8v24.64h14.52v3.69H343zm62.25.46c-4.493 0-7.853-1.18-10.08-3.54-2.227-2.36-3.34-6.027-3.34-11 0-5.16 1.113-8.9 3.34-11.22 2.227-2.32 5.587-3.477 10.08-3.47 4.507 0 7.87 1.157 10.09 3.47 2.22 2.313 3.33 6.053 3.33 11.22 0 4.96-1.11 8.627-3.33 11-2.22 2.373-5.583 3.553-10.09 3.54zm0-4c2.96 0 5.137-.817 6.53-2.45 1.393-1.633 2.09-4.3 2.09-8 0-3.933-.697-6.683-2.09-8.25-1.393-1.567-3.57-2.35-6.53-2.35-2.94 0-5.103.783-6.49 2.35-1.4 1.57-2.09 4.32-2.09 8.25 0 3.73.69 6.41 2.09 8 1.4 1.59 3.55 2.39 6.49 2.39v.06zm59.17 4c-4.667 0-8.177-1.26-10.53-3.78-2.353-2.52-3.537-5.927-3.55-10.22a19.632 19.632 0 011.54-8.08 11.36 11.36 0 014.69-5.25 15.515 15.515 0 018-1.85 28.632 28.632 0 014.55.33c1.315.172 2.613.457 3.88.85v4.14a23.13 23.13 0 00-8-1.32c-3.61 0-6.13.95-7.59 2.86s-2.17 4.65-2.17 8.23c0 3.253.76 5.73 2.28 7.43 1.53 1.7 3.89 2.56 7.09 2.56a17.77 17.77 0 006.11-.88V168h4.09v13.64a14.817 14.817 0 01-3.89 1.61 24.056 24.056 0 01-6.5.75zm42.91-.46v-28.33h4.79v28.33h-4.79zm38.23 0v-28.33h19.76V159h-15v8.58h13.33v3.69h-13.29v8.63h15v3.69l-19.8-.05zm59.8.46a23.342 23.342 0 01-8.85-1.4v-4.23c1.325.486 2.686.871 4.07 1.15a22.12 22.12 0 004.34.44c1.73.089 3.46-.184 5.08-.8a3.12 3.12 0 001.69-3.16 3.64 3.64 0 00-.7-2.34 5.538 5.538 0 00-2.33-1.51 37.156 37.156 0 00-4.49-1.35c-3.047-.787-5.19-1.787-6.43-3a6.78 6.78 0 01-1.84-5 6.992 6.992 0 012.72-5.85c1.82-1.41 4.54-2.11 8.14-2.11a29.784 29.784 0 014.65.35c1.157.165 2.298.429 3.41.79v4.23a20.643 20.643 0 00-7.4-1.28 11.649 11.649 0 00-4.92.84 2.993 2.993 0 00-1.359 1.219 2.993 2.993 0 00-.401 1.781c-.035.739.18 1.468.61 2.07a4.724 4.724 0 002.14 1.36c1 .38 2.41.81 4.2 1.28a18.998 18.998 0 015.39 2.09 7.002 7.002 0 012.68 2.82 8.345 8.345 0 01.77 3.63 6.985 6.985 0 01-.664 3.275 6.993 6.993 0 01-2.106 2.595c-1.84 1.407-4.64 2.11-8.4 2.11z" fill="#469BE0"></path></svg></a>
        `
    }
};
app.components.logoutView = () => {
    return {
        template: `
            <div>Logging out...</div>
        `,

        onFirstRender: async () => {
            const res = await fetch('/scripts/logout', { method: 'POST' });
            const resJson = await res.json();
            
            if (resJson.status === 'Success') {
                sessionStorage.removeItem('htt_user');
                app.data.user = null;
                app.newRoute('/login', 'replace');
            }
        }
    }
};
app.components.modal = (props) => {
    var modalHeader = (props.header) ? `<h3>${props.header}</h3>` : '';

    return {
        template: `
            <div class="modal">
                <div class="modal-card">
                    <a href="#" onclick="app.run(event, 'closeModal')" class="close-modal">&times;</a>
                    ${modalHeader}
                    ${props.body}
                </div>
            </div>
        `,

        styles: `
            .modal {
                position: fixed;
                top: 0;
                right: 0;
                left: 0;
                bottom: 0;
                padding: 100px 15px 15px 15px;
                background-color: rgba(0,0,0,.8);
                opacity: 0;
                display: none;
                transition: .3s;
                overflow: auto;

                &.open {
                    align-items: center;
                    opacity: 1;
                }

                .modal-card {
                    background: #fff;
                    border-radius: 4px;
                    width: 800px;
                    max-width: 100%;
                    margin: 0 auto;
                    padding: 15px;
                    position: relative;

                    h3 {
                        border-bottom: 1px solid #ccc;
                        padding-bottom: 15px;
                    }

                    .close-modal {
                        width: 30px;
                        height: 30px;
                        background: #000;
                        color: #fff;
                        border-radius: 50%;
                        line-height: 30px;
                        text-align: center;
                        font-size: 24px;
                        box-shadow: 0 0 10px rgba(0,0,0,.5);
                        position: absolute;
                        top: -10px;
                        right: -10px;
                        text-decoration: none;
                    }
                }
            }
        `,

        functions: {
            closeModal: (e) => {
                e.preventDefault();
                app.update(props.toggleKey, false);
            }
        },

        onFirstRender: () => {
            document.querySelector('.modal').style.display = 'block';

            setTimeout(() => {
                document.querySelector('.modal').classList.add('open');
            });
        }
    }
};
app.components.newBtn = ({url}) => {
    return {
        template: `
            <li><a class="btn btn-sm" href="${url}"><i class="fa fa-plus" aria-hidden="true"></i> Add New</a></li>
        `
    }
}
app.components.pagination = (props) => {
    var totalCount = app.data[props.model + 'TotalCount'];
    var pagination = '';

    if (props.numItems < totalCount) {
        var numPages = Math.ceil(totalCount / props.perPage);

        for (var i = 1; i <= numPages; i++) {
            var active = (i === props.page) ? ' class="active"' : '';
            pagination += `<li${active}><a href="#" onclick="app.run(event, 'goToPage')">${i}</a></li>`;
        }

        pagination = `<ul class="list-inline list-unstyled pagination">${pagination}</ul>`;
    }

    return {
        template: pagination,

        styles: `
            .pagination {
                a {
                    width: 24px;
                    height: 24px;
                    text-align: center;
                    line-height: 24px;
                    display: block;
                    text-decoration: none;
                    border-radius: 50%;
                }

                .active a {
                    background: @primary;
                    color: #fff;
                }
            }
        `,

        functions: {
            goToPage: async (e) => {
                e.preventDefault();
                var newPage = +e.target.innerText;

                var offset = (newPage * props.perPage) - props.perPage;

                if (props.options) {               
                    props.options.offset = offset;
                } else {
                    props.options = {offset: offset};
                }

                props.page = newPage;

                props.data = await app.functions.get(props.model, props.filters, props.options);

                app.render('table', props, e.target.closest('.table'));
            }
        }
    }
};
app.components.root = () => {
    var header = (app.route.component === 'loginView') ? '' : app.render('header');

    return {
        template: `
            <div class="container">
                ${header}
                ${app.render('route')}
                ${app.render('toast')}
            </div>
        `,

        onFirstRender: () => {
            document.title = app.data.pageTitle + ' | HTT SCADA';

            document.onclick = (e) => {
                if (!e.target.closest('.remove-on-click')) {
                    document.querySelectorAll('.remove-on-click').forEach(item => {
                        item.remove();
                    });
                }
            };
        },

        styles: `
            @primary: #459CE0;

            * {
                box-sizing: border-box;
            }
            body {
                padding: 0;
                margin: 0;
                font-family: 'Roboto', Arial, sans-serif;
            }

            a {
                color: #4e6e9d;
            }

            h2, h3, h4 {
                margin-top: 0;
            }

            h1 {
                font-size: 26px;
            }

            h2 {
                font-size: 22px;
            }

            p {
                margin-top: 0;
            }

            .margin-bottom {
                margin-bottom: 15px;
            }

            .container {
                width: 1200px;
                max-width: 100%;
                margin: 0 auto;
                padding-left: 15px;
                padding-right: 15px;

                &-sm {
                    width: 400px;
                }
            }

            .text-right {
                text-align: right;
            }

            .grid {
                display: grid;
            }

            .grid-1-3 {
                grid-template-columns: minmax(0, 1fr) minmax(0, 3fr);
                gap: 30px;
            }

            li {
                margin-bottom: 5px;
            }
            
            .list-unstyled {
                list-style: none;
                padding: 0;
                margin-top: 0;
                margin-left: 0;
                margin-right: 0;
            }

            .list-inline {
                li {
                    display: inline-block;
                    margin-right: 15px;
                }
            }

            .list-inline.list-align-right {
                text-align: right;

                li {
                    margin-left: 15px;
                    margin-right: 0;
                }
            }

            .form-group {
                margin-bottom: 25px;
                position: relative;
            }

            .btn,
            .btn-no-bg {
                padding: 8px 15px;
                border-radius: 4px;
                border: none;
                text-transform: uppercase;
                cursor: pointer;
                text-decoration: none;
                display: inline-block;
                margin-bottom: 15px;
                font-size: 14px;
            }

            .btn {
                background: #459ce0;
                color: #fff;
            }

            .btn-sm {
                padding: 5px 10px;
            }

            form {
                width: 500px;
                max-width: 100%;
            }

            label,
            legend {
                display: block;
                font-size: 14px;
                margin-bottom: 4px;
                opacity: .7;
            }

            fieldset label {
                opacity: 1;
            }

            fieldset {
                border: none;
                padding: 0;
                margin: 0;
            }

            input[type="text"],
            input[type="email"],
            input[type="number"],
            input[type="password"],
            input[type="date"],
            input[type="datetime-local"],
            select {
                width: 100%;
                padding: 6px 0;
                border: none;
                border-bottom: 1px solid #ccc;
                font-family: 'Arial';
                font-size: 16px;

                &:focus {
                    outline: none;
                    border-bottom: 1px solid #459ce0;
                }
            }

            .input-inline {
                width: auto;
            }

            .rounded {
                border-radius: 50%;
            }

            .color-green {
                color: green;
            }

            .color-red {
                color: #c10000;
            }

            .show-mobile {
                display: none;
            }

            .hide-mobile {
                display: block;
            }

            @media (max-width: 767px) {
                .grid-1-3 {
                    grid-template-columns: auto;
                    gap: 15px;
                    display: block;
                }

                .show-mobile {
                    display: block;
                }

                .hide-mobile {
                    display: none;
                }
            }
        `
    }
};
app.components.subnav = ({items}) => {
    var subnavList = '';
    var subnavOptions = '';

    items.forEach(item => {
        var active = (item.active) ? ' class="active"' : '';
        var selected = (item.active) ? ' selected' : '';
        subnavList += `<li${active}><a href="${item.url}">${item.text}</a></li>`;
        subnavOptions += `<option value="${item.url}"${selected}>${item.text}</option>`;
    });

    return {
        template: `
            <div class="subnav-wrap">
                <ul class="list-unstyled subnav hide-mobile">
                    ${subnavList}
                </ul>
                <div class="form-group show-mobile">
                    <label>Sections</label>
                    <select onchange="app.run(event, 'changeSubnavRoute')">
                        ${subnavOptions}
                    </select>
                </div>
            </div>
        `,

        styles: `
            .subnav {
                a {
                    display: block;
                    background: #f5f5f5;
                    border-radius: 4px;
                    padding: 10px;
                    color: #000;
                    text-decoration: none;
                }

                li.active {
                    a {
                        background: #459ce0;
                        color: #fff;
                    }
                }
            }
        `,

        functions: {
            changeSubnavRoute: (e) => {
                app.newRoute(e.target.value);
            }
        }
    }
};
app.components.table = (props) => {
    var model = props.model;
    var thisModel = app.models[model];

    if (!thisModel) return { template: `<p>Model not found: ${model}</p>` }

    var output = '<p>No results found</p>';
    var parentModel = (thisModel.extends) ? app.models[thisModel.extends] : null;
    var parentModelFields = parentModel?.fields || [];
    var data = props.data;
    var fields = thisModel.fields;
    var allFields = parentModelFields.concat(fields);
    var exclude = props.exclude || [];
    var headers = '';
    var rows = '';
    var includedFields = allFields.filter(field => exclude.indexOf(field.name) === -1);

    if (data?.length) {
        props.numItems = data?.length || 0;
        props.page = props.page || 1;
        props.perPage = 20;

        includedFields.forEach((field, i) => {
            var headerText = (field.tableHeader) ? field.tableHeader : field.label;
            headers += `<th>${headerText}</th>`;
        });

        data.forEach(record => {
            var cells = '';
            var itemModel = record._type || model;
            
            includedFields.forEach(async (field, i) => {
                var value = record[field.name] || '';
                
                if (field.type === 'relationship') {
                    value = (record[field.name]) ? record[field.name][field.rel_display_key] : '';
                }

                value = (field.tableValue) ? field.tableValue(value) : value;

                if (i === 0 && (record.detailLink || props.detailLink)) {
                    var linkHref = '';

                    if (record.detailLink) {
                        linkHref = record.detailLink;
                    } else if (props.detailLink) {
                        var linkParts = props.detailLink.match(/{{{?(#[a-z]+ )?[a-z]+.[a-z]*}?}}/g);
                        
                        linkParts.forEach((part) => {
                            var key = part.replace(/{{/g, '').replace(/}}/g, '');
                            linkHref = props.detailLink.replace(part, record[key]);
                        });
                    }

                    cells += `<td><a href="${linkHref}">${value}</a></td>`;
                } else {
                    cells += `<td>${value}</td>`;
                }
            });

            rows += `
                <tr data-id="${record.id}" data-model="${itemModel}">
                    <td class="trash"><a href="#" onclick="app.run(event, 'delete')"><i class="fa fa-trash color-red" aria-hidden="true"></i></a></td>
                    ${cells}
                </tr>
            `;
        });

        output = `
            <div class="table">
                <div class="table-wrap">
                    <table>
                        <thead>
                            <tr>
                                <td>&nbsp;</td>
                                ${headers}
                            </tr>
                        </thead>
                        <tbody>${rows}</tbody>
                    </table>
                </div>
                ${app.render('pagination', props)}
            </div>
        `;
    }

    return {
        template: output,

        styles: `
            .table {
                margin-bottom: 30px;
            }

            .table-wrap {
                overflow: auto;
                box-shadow: 0 0 10px rgba(0,0,0,.2);
                border-radius: 4px;
                margin-bottom: 15px;
            }

            table {
                width: 100%;
                border-collapse: collapse;

                thead {
                    background: #459CE0;
                    color: #fff;

                    a {
                        color: #fff;
                        font-size: 13px;
                    }
                }

                tbody {
                    tr:nth-child(odd) {
                        background: #f9f9f9;
                    }
                }

                .trash {
                    width: 30px;
                }

                th, td {
                    padding: 10px;
                    text-align: left;
                    white-space: nowrap;
                    font-weight: normal;
                }
            }
        `,
        
        functions: {
            sortColumn: (e) => {
                var header = e.target.closest('th');
                var columnName = header.dataset.name;
                var direction = (header.dataset.sort) ? header.dataset.sort : 'asc';
            },

            delete: async (e) => {
                e.preventDefault();
                var id = e.target.closest('tr').dataset.id;
                var table = e.target.closest('.table');
                var itemModel = e.target.closest('tr').dataset.model;
    
                if (confirm('Are you sure you would like to delete this ' + model + ' item?')) {
                    var res = await fetch('/api/' + itemModel + '/' + id, { method: 'DELETE' });
                    var resJson = await res.json();
    
                    if (resJson.status === 200) {
                        app.functions.toast('Item Deleted');
                        props.data = props.data.filter(item => item.id !== id);
                        app.render('table', props, table);
                    } else {
                        app.functions.toast(resJson.message, 'Error');
                    }
                }
            },
        }
    }
};
app.components.toast = () => {
    return {
        template: `
            <div class="toast">
                <a href="#" class="toast-close" onclick="app.run(event, 'closeToast')">&times;</a>
                <div class="toast-message"></div>
            </div>
        `,

        styles: `
            .toast {
                position: fixed;
                display: none;
                right: -300px;
                bottom: 15px;
                background: darkgreen;
                color: #fff;
                width: 250px;
                border-radius: 4px;
                transition: all .5s;
                padding: 10px 15px;

                .toast-close {
                    position: absolute;
                    top: -5px;
                    right: -5px;
                    background: #444;
                    color: #fff;
                    text-align: center;
                    width: 24px;
                    height: 24px;
                    line-height: 24px;
                    border-radius: 50%;
                    text-decoration: none;
                    box-shadow: 0 0 5px rgba(0,0,0,.3);
                    border: 1px solid #fff;
                }

                &.error {
                    background: darkred;
                }

                &.open {
                    right: 15px;
                }
            }
        `,

        functions: {
            open: (message, status, callback) => {
                var toast = document.querySelector('.toast');

                toast.querySelector('.toast-message').innerText = message;
                toast.style.display = 'block';
    
                if (status === 'Error') {
                    toast.classList.add('error');
                } else {
                    toast.classList.remove('error');
                }
    
                setTimeout(() => {
                    toast.classList.add('open');
                }, 10);
    
                if (status === 'Success') {
                    setTimeout(() => {
                        app.components.toast().functions.closeToast(null, toast);

                        if (callback) {
                            callback();
                        }
                    }, 3000);
                }
            },

            closeToast: (e, toast) => {
                if (e) { e.preventDefault(); }

                var toast = toast || e.target.closest('.toast');

                toast.classList.remove('open');

                setTimeout(() => {
                    toast.style.display = 'none';
                    toast.classList.remove('error');
                }, 500);
            }
        }
    }
};
app.components.custDetail = function({cust}) {
    return {
        template: `
            <div class="customer-detail">
                <h2>Overview</h2>
                ${app.render('form', {model: 'customers', data: cust, type: 'edit'})}
            </div>
        `
    }
};
app.components.custInstallationsMap = function({cust}) {
    return {
        template: `
            <div class="customer-installations-map">
                <h2>Installations</h2>
                ${app.render('btnGroup', {newBtnUrl: `/customer/${cust.id}/installations/new`, items: [{text: 'List View', icon: 'list', url: `/customers/${cust.id}/installations`}]})}
                <div id="map"></div>
            </div>
        `,

        styles: `
            #map {
                height: 500px;
            }
        `,

        onFirstRender: async () => {
            if (app.data.custInstallations) {
                app.functions.loadStylesheets([
                    'https://unpkg.com/leaflet@1.7.1/dist/leaflet.css',
                    'https://leaflet.github.io/Leaflet.markercluster/dist/MarkerCluster.css',
                    'https://leaflet.github.io/Leaflet.markercluster/dist/MarkerCluster.Default.css'
                ]);

                await app.functions.loadScripts([
                    'https://unpkg.com/leaflet@1.7.1/dist/leaflet.js',
                    'https://leaflet.github.io/Leaflet.markercluster/dist/leaflet.markercluster-src.js'
                ]);

                const map = L.map("map");

                L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '&copy; OpenStreetMap'
                }).addTo(map);

                let markers = L.markerClusterGroup();

                app.data.custInstallations.forEach(inst => {
                    const latLng = [parseFloat(inst.lat), parseFloat(inst.lng)];
                    var marker = L.marker(latLng);
                    marker.bindPopup(inst.name);
                    markers.addLayer(marker);
                });

                map.addLayer(markers);
                map.fitBounds(markers.getBounds());
            }
        }
    }
};
app.components.custInstallations = function({cust}) {
    return {
        template: `
            <div class="customer-installations">
                <h2>Installations</h2>
                ${app.render('btnGroup', {newBtnUrl: `/customers/${cust.id}/installations/new`, items: [{text: 'Map View', url: `/customers/${cust.id}/installations/map`, icon: 'map-marker-alt'}]})}
                ${app.render('table', {model: 'installations', data: app.data.custInstallations, exclude: ['customer'], detailLink: `/installations/{{id}}`})}
            </div>
        `
    }
};
app.components.custNewInstallation = function({cust}) {
    return {
        template: `
            <div class="new-installation">
                <h2>New Installation</h2>
                ${app.render('form', {model: 'installations', data: {customer: cust}})}
            </div>
        `
    }
};
app.routeData.custPageTemplate = async () => {
    var sectionSlug = app.url.pathArray[2];
    var instSection = app.url.pathArray[3];
    var custId = app.url.mapped.custId;
    
    app.data.customer = await app.functions.getById('customers', custId);

    if (sectionSlug === 'installations' && instSection !== 'new') {
        app.data.custInstallations = await app.functions.get('installations', {customer: custId});
    } else if (sectionSlug === 'users') {
        app.data.custUsers = await app.functions.get('users', {customer: custId});
    }
};

app.components.custPageTemplate = function() {
    var customer = app.data.customer;
    var breadcrumbs = app.render('breadcrumbs', {items: [{text: 'Customers', url: '/customers'}, {text: customer.name}]});
    var sectionSlug = app.url.pathArray[2];
    var component = (sectionSlug === 'installations' && app.url.pathArray[3] === 'map') ? 'custInstallationsMap'
        : (sectionSlug === 'installations' && app.url.pathArray[3] === 'new') ? 'custNewInstallation'
        : (sectionSlug === 'installations') ? 'custInstallations' 
        : (sectionSlug === 'users') ? 'custUsers' 
        : 'custDetail';

        console.log(component);
    var baseUrl = `/customers/${customer.id}`;
    var subnavItems = [
        {text: 'Overview', url: `${baseUrl}`},
        {text: 'Installations', url: `${baseUrl}/installations`},
        {text: 'Users', url: `${baseUrl}/users`},
    ];
    var match = false;

    subnavItems.forEach(item => {
        if (item.url === app.url.path) {
            item.active = true;
            match = true;
        }
    });

    if (!match) {
        subnavItems[1].active = true;
    }

    return {
        template: `
            <div class="customer">
                ${app.render('headingBar', {title: customer.name, breadcrumbs: breadcrumbs})}
                <div class="grid grid-1-3">
                    ${app.render('subnav', {items: subnavItems})}
                    <div>
                        ${app.render(component, {cust: customer})}
                    </div>
                </div>
            </div>
        `
    }
};
app.components.custUsers = function({cust}) {
    return {
        template: `
            <div class="customer-users">
                <h2>Users</h2>
                ${app.render('table', {model: 'users', data: app.data.custUsers, exclude: ['image', 'customer'], detailLink: `/users/{{id}}`})}
            </div>
        `
    }
};
app.routeData.customers = async () => {
    app.data.customers = await app.functions.get('customers', app.url.params);
};

app.components.customers = () => {
    var breadcrumbs = app.render('breadcrumbs', {items: [{text: 'Customers'}]});

    return {
        template: `
            <div class="customers">
                ${app.render('headingBar', {title: 'Customers', breadcrumbs: breadcrumbs})}
                ${app.render('btnGroup', { newBtnUrl: '/customers/new' })}
                ${app.render('table', {model: 'customers', data: app.data.customers, detailLink: '/customers/{{id}}'})}
            </div>
        `
    }
};
app.components.newCustomer = () => {
    var breadcrumbs = app.render('breadcrumbs', {items: [{text: 'Customers', url: '/customers'}, {text: 'New Customer'}]});

    return {
        template: `
            <div class="customers">
                ${app.render('headingBar', {title: 'New Customer', breadcrumbs: breadcrumbs})}
                ${app.render('form', {model: 'customers'})}
            </div>
        `
    }
};
app.routeData.distributorDetail = async () => {
    app.data.distributor = await app.functions.getById('distributors', app.url.mapped.distId);
}

app.components.distributorDetail = () => {
    var dist = app.data.distributor;
    var breadcrumbs = app.render('breadcrumbs', {items: [{text: 'Distributors', url: '/distributors'}, {text: dist.name}]});

    return {
        template: `
            <div class="distributor-detail">
                ${app.render('headingBar', {title: dist.name, breadcrumbs: breadcrumbs})}
                ${app.render('form', {model: 'distributors', data: dist})}
            </div>
        `
    }
};
app.components.distributorsList = (props) => {
    return {
        template: `
            <div class="distributors-list">
                ${app.render('btnGroup', { newBtnUrl: '/distributors/new' })}
                ${app.render('table', { model: 'distributors', data: app.data.distributors, detailLink: '/distributors/{{id}}' })}
            </div>
        `
    }
};
app.routeData.distributors = async () => {
    app.data.distributors = await app.functions.get('distributors');
};

app.components.distributors = () => {
    var breadcrumbs = app.render('breadcrumbs', {items: [{text: 'Distributors'}]});
    
    return {
        template: `
            <div>
                ${app.render('headingBar', {title: 'Distributors', breadcrumbs: breadcrumbs})}
                ${app.render('distributorsList')}
            </div>
        `
    }
};
app.components.newDistributor = () => {
    var breadcrumbs = app.render('breadcrumbs', {items: [{text: 'Distributors', url: '/distributors'}, {text: 'New Distributor'}]});
    
    return {
        template: `
            <div>
                ${app.render('headingBar', {title: 'New Distributor', breadcrumbs: breadcrumbs})}
                ${app.render('form', {model: 'distributors'})}
            </div>
        `
    }
};
app.routeData.hardwareDetail = async () => {
    app.data.hardware = await app.functions.getById(app.url.mapped.hardwareType, app.url.mapped.hardwareId);
};

app.components.hardwareDetail = () => {
    return {
        template: `
            ${app.render('hardwarePageTemplate', {
                mainContent: `
                    <div>
                        <h2>${app.data.hardware.name}</h2>
                        ${app.render('form', {model: 'rtus', data: app.data.hardware})}
                    </div>
                `
            })}
        `
    }
};
app.components.hardwarePageTemplate = (props) => {
    var hardwareType = app.url.mapped.hardwareType || 'rtus';
    var hardwareTitle = (hardwareType === 'stackups') ? 'Stackups' : 'RTUs';
    var breadcrumbs = app.render('breadcrumbs', {items: [{text: 'Hardware', url: '/hardware'}, {text: hardwareTitle}]});
    var subnavItems = [{text: 'RTUs', url: '/hardware/rtus'}, {text: 'Stackups', url: '/hardware/stackups'}];

    subnavItems.forEach(item => {
        if ((app.url.path.indexOf(item.url) > -1) || (app.url.path === '/hardware' && item.url === '/hardware/rtus')) {
            item.active = true;
        }
    });

    return {
        template: `
            <div>
                ${app.render('headingBar', {title: hardwareTitle, breadcrumbs: breadcrumbs})}
                <div class="grid grid-1-3">
                    ${app.render('subnav', {items: subnavItems})}
                    ${props.mainContent}
                </div>
            </div>
        `
    }
}
app.routeData.hardware = async () => {
    var hardwareType = app.url.mapped.hardwareType || 'rtus';
    app.data.hardware = await app.functions.get(hardwareType);
};

app.components.hardware = () => {
    var hardwareType = app.url.mapped.hardwareType || 'rtus';

    return {
        template: `
            ${app.render('hardwarePageTemplate', {
                mainContent: `
                    <div>
                        ${app.render('btnGroup', {newBtnUrl: `/hardware/${hardwareType}`})}
                        ${app.render('table', {model: hardwareType, data: app.data.hardware, detailLink: `/hardware/${hardwareType}/{{id}}`})}
                    </div>
                `
            })}
        `
    }
}
app.components.newHardware = () => {
    var hardwareType = app.url.mapped.hardwareType;

    return {
        template: `
            ${app.render('hardwarePageTemplate', {
                mainContent: `
                    ${app.render('form', {model: hardwareType})}
                `
            })}
        `
    }
};
app.components.breadcrumbs = ({items}) => {
    var bcList = '';
    var bcHomeLink = (app.data.user.customer?.id) ? '/installations' : '/';

    items.forEach(item => {
        bcLink = (item.url) ? `<a href="${item.url}">${item.text}</a>` : item.text;
        bcList += `<li>${bcLink}</li>`;
    });

    return {
        template: `
            <ul class="list-unstyled list-inline breadcrumbs">
                <li><a href="${bcHomeLink}"><i class="fa fa-home" aria-hidden="true"></i></a></li>
                ${bcList}
            </ul>
        `,

        styles: `
            .breadcrumbs.list-unstyled {
                font-size: 14px;
                margin-bottom: 15px;

                li {
                    margin-right: 8px;
                }

                li:not(:first-child):before {
                    content: "/";
                    padding-right: 10px;
                }
            }

            @media (max-width: 767px) {
                .breadcrumbs.list-unstyled {
                    margin-bottom: 15px;
                }
            }
        `
    }
};
app.components.headerNav = () => {
    var navItemsHtml = '';

    var navItems = [
        { name: 'Installations', url: '/installations' },
        { name: 'Users', url: '/users' },
        { name: '<i class="fa fa-user" aria-hidden="true"></i>', title: 'My Profile', url: `/users/${app.data.user.id}` },
        { name: '<i class="fa fa-sign-out" aria-hidden="true"></i>', title: 'Logout', url: '/logout'}
    ];
    
    if (app.data.user?.role?.name === 'HTT Admin') {
        navItems = [
            { name: 'Distributors', url: '/distributors' },
            { name: 'Customers', url: '/customers' },
            { name: 'Installations', url: '/installations' },
            { name: 'Hardware', url: '/hardware' },
            { name: 'Users', url: '/users' },
            { name: '<i class="fa fa-user" aria-hidden="true"></i>', title: 'My Profile', url: `/users/${app.data.user.id}` },
            { name: '<i class="fa fa-sign-out" aria-hidden="true"></i>', title: 'Logout', url: '/logout'}
        ];
    }

    navItems.forEach(item => {
        var title = (item.title) ? ' title="' + item.title + '"' : '';
        navItemsHtml += `<li><a href="${item.url}"${title}>${item.name}</a></li>`;
    });

    return {
        template: `
            <div class="nav-wrap">
                <div class="nav-toggle"><a class="show-mobile" href="#" onclick="app.run(event, 'toggleNav')"><i class="fa fa-bars" aria-hidden="true"></i></a></div>
                <div class="nav-panel">
                    <p class="close-nav show-mobile"><a href="#" onclick="app.run(event, 'toggleNav')">&times; Close</a></p>
                    <ul class="list-inline list-unstyled list-align-right header-nav">
                        ${navItemsHtml}
                    </ul>
                </div>
            </div>
        `,

        styles: `
            .nav-toggle a {
                text-align: right;
                font-size: 24px;
            }
            
            .header-nav {
                a {
                    color: #000;
                    text-decoration: none;
                }
            }

            @media (max-width: 767px) {
                .close-nav {
                    text-align: right;

                    a {
                        color: #fff;
                        padding: 15px 30px;
                        font-size: 20px;
                        display: block;
                    }
                }

                .nav-panel {
                    position: fixed;
                    top: 0;
                    right: 0;
                    left: 0;
                    bottom: 0;
                    z-index: 100;
                    background: #335589;
                    display: none;
                    color: #fff;

                    &.open {
                        display: block;
                    }

                    .list-inline.list-align-right li {
                        display: block;
                        margin: 0;

                        a {
                            padding: 15px 30px;
                            display: block;
                            font-size: 20px;
                            color: #fff;
                        }
                    }
                }
            }
        `,

        functions: {
            toggleNav: (e) => {
                e.preventDefault();
                var navPanel = document.querySelector('.nav-panel');

                if (!navPanel.classList.contains('open')) {
                    navPanel.classList.add('open');
                } else {
                    navPanel.classList.remove('open');
                }
            }
        }
    }
};
app.components.header = () => {
    return {
        template: `
            <div class="header grid">
                ${app.render('logoSvg')}
                <div class="header-right">
                    ${app.render('headerNav')}
                </div>
            </div>
        `,

        styles: `
            .header {
                padding-top: 15px;
                padding-bottom: 15px;
                grid-template-columns: 150px auto;
                gap: 30px;
            }
        `
    }
};
app.components.headingBar = (props) => {
    app.data.pageTitle = props.seoPageTitle || props.title;
    
    return {
        template: `
            <div class="heading-bar">
                <h1>${props.title}</h1>
                ${props.breadcrumbs}
            </div>
        `,

        styles: `
            .heading-bar {
                border-bottom: 5px solid #459CE0;
                margin-bottom: 30px;
            }
        `
    }
};
app.components.instAlarmDetail = () => {
    return {
        template: `
            ${app.render('instPageTemplate', {
                mainContent: `
                    <div>
                        <h2>${alarm.name}</h2>
                        ${app.render('form', {model: 'alarms', data: app.data.alarm})}
                    </div>
                `
            })}
        `
    }
};
app.components.instAlarms = () => {
    return {
        template: `
            <div class="inst-alarms">
                <h2>Alarms</h2>
                ${app.render('table', { model: 'alarms', data: app.data.alarms, detailLink: `/alarms/{{id}}`})}
            </div>
        `
    }
};
app.components.instDetail = ({inst}) => {
    return {
        template: `
            <div class="inst-detail">
                <h2>Overview</h2>
                <div id="map"></div>
                ${app.render('form', {model: 'installations', data: inst})}
            </div>
        `,

        styles: `
            #map {
                height: 250px;
                margin-bottom: 30px;
            }
        `,

        onEveryRender: async () => {
            if (inst.lat && inst.lng) {
                app.functions.loadStylesheets(['https://unpkg.com/leaflet@1.7.1/dist/leaflet.css']);

                await app.functions.loadScripts(['https://unpkg.com/leaflet@1.7.1/dist/leaflet.js']);

                const latLng = [parseFloat(inst.lat), parseFloat(inst.lng)];

                const map = L.map("map", {
                    center: latLng,
                    zoom: 15
                });

                L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '&copy; OpenStreetMap'
                }).addTo(map);

                var marker = L.marker(latLng);
                marker.bindPopup(inst.name);

                marker.addTo(map);
            }
        }
    }
};
app.components.instIODetail = () => {
    var ioItem = app.data.ioItem;

    return {
        template: `
            <div class="inst-io-detail">
                <h2>${ioItem.name}</h2>
                ${app.render('form', {model: app.url.mapped.ioType, data: ioItem})}
            </div>
        `
    }
};
/*app.routeData.instIO = async () => {
    if (app.url.params.installation) {
        app.data.installation = await app.functions.getById('installations', app.url.params.installation);
        app.data.customer = app.data.installation.customer;
    }

    var io = [];
    var ioTypes = await app.functions.get('io-types');

    for (var i = 0; i < ioTypes.length; i++) {
        var ioType = ioTypes[i];
        var typeResults = await app.functions.get(ioType.model, app.url.params);

        if (typeResults) {
            typeResults.forEach(res => {
                res._type = ioType.model;
                io.push(res);
            });
        }
    }

    app.data.io = io;
};*/

app.components.instIO = ({inst}) => {
    app.data.io.forEach(io => {
        io.detailLink = `/installations/${inst.id}/io/${io._type}/${io.id}`;
    });

    return {
        template: `
            <div class="inst-io">
                <h2>IO</h2>
                ${app.render('btnGroup', {newBtnUrl: `/installations/${inst.id}/io/new`})}
                ${app.render('table', {model: 'io', data: app.data.io, exclude: ['installation']})}
            </div>
        `
    }
};
app.components.instLegacyControls = () => {
    return {
        template: `
            <div class="inst-legacy-controls">
                <h2>Legacy Controls</h2>
                ${app.render('table', {model: 'legacy-controls'})}
            </div>
        `
    }
};
app.components.instLogs = () => {
    return {
        template: `
            <div class="inst-logs">
                <h2>Logs</h2>
                ${app.render('table', {model: 'logs'})}
            </div>
            
        `
    }
};
app.components.instNewIO = ({inst}) => {
    var ioForm = '';
    var ioType = app.url.mapped.ioType;
    var ioOpts = [];
    var newText = 'New IO';
    var selectedIoValue = '';

    app.data.ioTypes.forEach(type => {
        if (ioType === type.slug) {
            newText = type.name;
            selectedIoValue = type.model;
        }

        ioOpts.push({text: type.name, value: type.slug});
    });

    if (selectedIoValue) {
        ioForm = app.render('form', {model: selectedIoValue, data: app.url.params});

        /*if (selectedIOType === 'analog-input') {
            formFields += `
                ${app.render('formField', {label: 'Units', name: 'units', required: true})}
                ${app.render('formField', {label: 'Assigned Location', type: 'number', name: 'location', required: true})}
                ${app.render('formField', {label: 'PLC', type: 'checkbox', name: 'plc', required: true, options: [
                    { text: 'Yes', value: true, events: [ { action: 'onclick', function: 'togglePlc', source: 'instNewIO' } ]}
                ]})}
                ${app.render('formField', {label: 'Slot', type: 'number', name: 'slot', disabled: true})}
                ${app.render('formField', {label: 'Sensor Type', type: 'select', name: 'sensor_type', required: true, options: [
                    { text: 'Current', value: 'current' },
                    { text: 'Voltage', value: 'voltage' },
                    { text: 'Scale', value: 'scale' },
                    { text: 'Expansion', value: 'expansion' },
                    { text: 'Decimal', value: 'decimal' },
                    { text: 'Alarm as Digital', value: 'alarm-as-digital' },
                ]})}
                ${app.render('formField', {label: 'Resistor (Ohms)', type: 'number', name: 'resitor'})}
                ${app.render('formField', {label: 'High Val (in above units)', type: 'number', name: 'high_val_units'})}
                ${app.render('formField', {label: 'Low Val (in above units)', type: 'number', name: 'low_val_units'})}
                ${app.render('formField', {label: 'High Val (4 - 20)', type: 'number', name: 'high_val'})}
                ${app.render('formField', {label: 'Low Val (4 - 20)', type: 'number', name: 'low_val'})}
                ${app.render('formField', {label: 'Offset', type: 'number', name: 'offset'})}
                ${app.render('formField', {label: 'Precision Level', type: 'number', name: 'precision_level'})}
                ${app.render('formField', {label: 'Maximum Display Value', type: 'number', name: 'max_display_value'})}
                ${app.render('formField', {label: 'Minimum Display Value', type: 'number', name: 'min_display_value'})}
            `;
        } else if (selectedIOType === 'analog-output') {
            formFields += `
                ${app.render('formField', {label: 'Units', name: 'units', required: true})}
                ${app.render('formField', {label: 'Output', type: 'number', name: 'output', required: true})}
                ${app.render('formField', {label: 'PLC', type: 'checkbox', name: 'plc', required: true, options: [
                    { text: 'Yes', value: true, events: [ { action: 'onclick', function: 'togglePlc', source: 'instNewIO' } ]}
                ]})}
                ${app.render('formField', {label: 'Slot', type: 'number', name: 'slot', disabled: true})}
                ${app.render('formField', {label: 'High Val', type: 'number', name: 'high_val'})}
                ${app.render('formField', {label: 'Low Val', type: 'number', name: 'low_val'})}
                ${app.render('formField', {label: 'Max Val', type: 'number', name: 'max_val'})}
                ${app.render('formField', {label: 'Min Val', type: 'number', name: 'min_val'})}
            `;
        } else if (selectedIOType === 'digital-input') {
            formFields += `
                ${app.render('formField', {label: 'Input', type: "number", name: 'input', required: true})}
                ${app.render('formField', {label: 'PLC', type: 'checkbox', name: 'plc', required: true, options: [
                    { text: 'Yes', value: true, events: [ { action: 'onclick', function: 'togglePlc', source: 'instNewIO' } ]}
                ]})}
                ${app.render('formField', {label: 'Slot', type: 'number', name: 'slot', disabled: true})}
                ${app.render('formField', {label: 'Closed Text', name: 'closed_text'})}
                ${app.render('formField', {label: 'Open Text', name: 'open_text'})}
                ${app.render('formField', {label: 'Alarm Polarity', type: 'radio', name: 'alarm_polarity', required: true, options: [
                    { text: 'Alarm on closed', value: 'closed' },
                    { text: 'Alarm on open', value: 'open' },
                ]})}
                ${app.render('formField', {label: 'Alarm Action', type: 'select', name: 'alarm_action', required: true, options: [
                    { text: 'Alarm', value: 'alarm' },
                    { text: 'Alert', value: 'alert' },
                    { text: 'Report', value: 'report' },
                    { text: 'Disabled', value: 'disabled' },
                ]})}
            `;
        } else if (selectedIOType === 'digital-output') {
            formFields += `
                ${app.render('formField', {label: 'Output', name: 'output', required: true})}
                ${app.render('formField', {label: 'PLC', type: 'checkbox', name: 'plc', required: true, options: [
                    { text: 'Yes', value: true, events: [ { action: 'onclick', function: 'togglePlc', source: 'instNewIO' } ]}
                ]})}
                ${app.render('formField', {label: 'Slot', type: 'number', name: 'slot', disabled: true})}
                ${app.render('formField', {label: 'Call on text', name: 'call_on_text'})}
                ${app.render('formField', {label: 'Call off text', name: 'call_off_text'})}
                ${app.render('formField', {label: 'Call Polarity', type: 'radio', name: 'call_polarity', required: true, options: [
                    { text: 'Closed', value: 'closed' },
                    { text: 'Open', value: 'open' },
                ]})}
                ${app.render('formField', {label: 'Pulse', type: 'checkbox', name: 'pulse', required: true, options: [
                    { text: 'Yes', value: true, events: [ { action: 'onclick', function: 'togglePulse', source: 'instNewIO' } ]}
                ]})}
                ${app.render('formField', {label: 'Pulse Duration (in 1/8s of a second)', name: 'pulse_duration', disabled: true})}
            `;
        }

        formFields += `
            <button type="submit" class="btn">Create</button>
        `;
        */
    }

    return {
        template: `
            <div class="new-io">
                <form>
                    ${app.render('formField', {label: 'IO Type', type: 'select', name: 'type', required: true, options: ioOpts, value: selectedIoValue, events: [{ action: 'onchange', function: 'changeIOType', source: 'instNewIO' }]})}
                </form>
                ${ioForm}
            </div>
        `,

        functions: {
            changeIOType: (e) => {
                app.newRoute(`/installations/${inst.id}/io/${e.target.value}/new`);
            },

            togglePlc: (e) => {
                var checked = e.target.checked;
                var slotInput = document.querySelector('[name="slot"]');
                
                if (checked) {
                    slotInput.disabled = false;
                    slotInput.required = true;
                } else {
                    slotInput.disabled = true;
                    slotInput.required = false;
                }
            },

            togglePulse: (e) => {
                var checked = e.target.checked;
                var pulseDurationInput = document.querySelector('[name="pulse_duration"]');
                
                if (checked) {
                    pulseDurationInput.disabled = false;
                    pulseDurationInput.required = true;
                } else {
                    pulseDurationInput.disabled = true;
                    pulseDurationInput.required = false;
                }
            }
        }
    }
};
app.routeData.instPageTemplate = async () => {
    var instId = app.url.mapped.instId;
    
    app.data.installation = await app.functions.getById('installations', instId);
    app.data.customer = await app.functions.getById('customers', app.data.installation.customer.id);

    var sectionSlug = app.url.pathArray[2];

    if (sectionSlug === 'io') {
        var ioTypes = await app.functions.get('io-types');

        app.data.ioTypes = ioTypes;

        if (app.url.mapped.ioType && app.url.mapped.ioType !== 'new') {
            // io by type
            app.data.io = await app.functions.get(app.url.mapped.ioType, {installation: instId});

            if (app.url.mapped.ioId && app.url.mapped.ioId !== 'new') {
                // io detail
                app.data.ioItem = await app.functions.getById(app.url.mapped.ioType, app.url.mapped.ioId);
            }
        } else {
            // all io for installation
            var io = [];

            for (var i = 0; i < ioTypes.length; i++) {
                var ioType = ioTypes[i];
                var typeResults = await app.functions.get(ioType.model, {installation: instId});

                if (typeResults) {
                    typeResults.forEach(item => {
                        item._type = ioType.model;
                        io.push(item);
                    });
                }
            }

            app.data.io = io;
        }
    } else if (sectionSlug === 'alarms') {
        if (app.url.mapped.alarmId) {
            app.data.alarm = await app.functions.getById('alarms', app.url.mapped.alarmId, {depth: 2});
        } else {
            app.data.alarms = await app.functions.get('alarms', app.url.params);
        }
    }
}

app.components.instPageTemplate = () => {
    var inst = app.data.installation;
    var cust = app.data.customer;
    var baseUrl = `/installations/${inst.id}`;
    var subnavItems = [
        {text: 'Overview', url: baseUrl, component: 'instDetail'}, 
        {text: 'Alarms', url: `${baseUrl}/alarms`, component: 'instAlarms'}, 
        {text: 'Logs', url: `${baseUrl}/logs`, component: 'instLogs'},
        {text: 'IO',  url: `${baseUrl}/io`, component: 'instIO'},
        {text: 'RTU Configs', url: `${baseUrl}/rtu-configs`, component: 'instRtuConfigs'},
        {text: 'RTU Messages', url: `${baseUrl}/rtu-messages`, component: 'instRtuMessages'},
        {text: 'Telemetry Data', url: `${baseUrl}/telemetry-data`, component: 'instTelemetryData'},
        {text: 'Legacy Controls', url: `${baseUrl}/legacy-controls`, component: 'instLegacyControls'}
    ];

    var section = (!app.url.pathArray[2]) ? subnavItems[0] : subnavItems.find(sect => app.url.path.indexOf(sect.url) > -1 && sect.text !== 'Overview');
    var component = null;

    console.log('why');

    // Detail pages
    if (app.url.mapped.alarmId) {
        component = 'instAlarmDetail';
    } else if (app.url.mapped.logId) {
        component = 'instLogDetail';
    } else if (app.url.pathArray[2] === 'io') {
        console.log('yep');
        if (app.url.mapped.ioId === 'new' || app.url.mapped.ioType === 'new') {
            console.log('in here');
            component = 'instNewIO';
        } else if (app.url.mapped.ioId) {
            component = 'instIODetail';
        } else {
            component = 'instIO';
        }
    } else if (app.url.mapped.rtuConfigId) {
        component = 'instRtuConfigDetail';
    } else if (app.url.mapped.rtuMessageId) {
        component = 'instRtuMessageDetail';
    } else if (app.url.mapped.rtuTelemetryDataId) {
        component = 'instTelemetryDataDetail';
    } else if (app.url.mapped.rtuLegacyControlId) {
        component = 'instLegacyControlDetail';
    } else {
        component = section.component;
    }

    section.active = true;

    var bcItems = (!app.data.user.customer) ? [
        {text: 'Customers', url: '/customers'},
        {text: cust.name, url: '/customers/' + cust.id},
        {text: 'Installations', url: '/customers/' + cust.id + '/installations'},
        {text: inst.name}
    ] : [
        {text: 'Installations', url: '/installations'},
        {text: inst.name}
    ];

    var breadcrumbs = app.render('breadcrumbs', {items: bcItems});
    

    return {
        template: `
            <div class="installation">
                ${app.render('headingBar', {title: inst.name, breadcrumbs: breadcrumbs})}
                <div class="grid grid-1-3">
                    <div>
                        ${app.render('subnav', {items: subnavItems})}
                    </div>
                    <div>
                        ${app.render(component, {inst: inst})}
                    </div>
                </div>
            </div>
        `,

        styles: `
            #map {
                height: 250px;
                margin-bottom: 30px;
            }
        `
    }
};
app.components.instRtuConfigs = () => {
    return {
        template: `
            <div class="inst-rtu-configs">
                <h2>RTU Configs</h2>
                ${app.render('table', {model: 'rtu-configs'})}
            </div>
        `
    }
};
app.components.instRtuMessages = () => {
    return {
        template: `
            <div class="inst-rtu-messages">
                <h2>RTU Messages</h2>
                ${app.render('table', {model: 'rtu-messages'})}
            </div>
        `
    }
};
app.components.instTelemetryData = () => {
    return {
        template: `
            <div class="inst-telemetry-data">
                <h2>Telemtetry Data</h2>
                ${app.render('table', {model: 'telemetry-data'})}
            </div>
        `
    }
};
app.components.installationsList = (props) => {
    return {
        template: `
            <div class="installations-list">
                ${app.render('table', { model: 'installations', data: app.data.installations, detailLink: '/installations/{{id}}'})}
            </div>
        `,

        styles: `
            .alarm-status {
                .fa-bell {
                    color: #c70000;
                }

                .fa-check {
                    color: green;
                }
            }
        `
    }
};
app.routeData.installations = async () => {
    app.data.installations = await app.functions.get('installations', app.url.params);

    if (app.url.params.customer) {
        app.data.customer = (app.data.installations[0]) ? app.data.installations[0].customer : null;
    }
};

app.components.installations = () => {
    var bcItems = (app.data.customer) ? [{text: app.data.customer.name, url: '/customers/' + app.data.customer.id}, {text: 'Installations'}] : [{text: 'Installations'}];
    var breadcrumbs = app.render('breadcrumbs', {items: bcItems});
    var output = (app.url.params.customer && !app.data.customer) ? '<p>Customer not found</p>' : app.render('installationsList');

    return {
        template: `
            <div>
                ${app.render('headingBar', {title: 'Installations', breadcrumbs: breadcrumbs})}
                ${output}
            </div>
        `
    }
};
app.components.newInstallation = () => {
    var breadcrumbs = app.render('breadcrumbs', {items: [{text: 'Installations', url: '/installations'}, {text: 'New'}]});

    return {
        template: `
            <div>
                ${app.render('headingBar', {title: 'New Installation', breadcrumbs: breadcrumbs})}
                ${app.render('form', {model: 'installations', data: {customer: app.data.customer}})}
            </div>
            
        `
    }
};
app.components.signalStrengthChart = (props) => {
    return {
        template: `
            <canvas id="ss-chart"></canvas>
        `,

        styles: `
            #ss-chart {
                width: 100%;
            }
        `,

        onFirstRender: () => {
            var s = document.createElement('script');
            s.src = 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js';
            s.onload = () => {
                var xValues = ['7/28', '7/29', '7/30', '7/31', '8/1'];
                var yValues = [-68, -62, -64, -72, -68];

                new Chart("ss-chart", {
                    type: "line",
                    data: {
                        labels: xValues,
                        datasets: [{
                            fill: false,
                            lineTension: 0,
                            backgroundColor: "rgba(0,0,0,1.0)",
                            borderColor: "rgba(0,0,0,0.1)",
                            data: yValues
                        }]
                    },
                    options: {
                        legend: {display: false}
                    }
                });
            };
            document.body.append(s);
        }
    }
};
app.routeData.userDetail = async () => {
    app.data.userDetail = await app.functions.getById('users', app.url.mapped.userId);
}

app.components.userDetail = () => {
    var user = app.data.userDetail;
    var fullName = `${user.first_name} ${user.last_name}`;
    var breadcrumbs = app.render('breadcrumbs', {items: [
        {text: 'Users', url: '/users'},
        {text: fullName}
    ]});

    return {
        template: `
            <div>
                ${app.render('headingBar', {title: fullName, breadcrumbs: breadcrumbs})}
                ${app.render('form', {model: 'users', data: user})}
            </div>
        `,

        styles: `
            .profile-pic-lg {
                width: 120px;
            }
            .upload-profile-pic {
                display: none;
            }
        `,

        functions: {
            editProfilePic: (e) => {
                e.preventDefault();
                document.querySelector('.upload-profile-pic').click();
            },

            uploadProfilePic: (e) => {
                e.preventDefault();
                alert('Uploading Profile Pic...');
            }
        }
    }
};
app.components.usersList = (props) => {
    var exclude = (props.exclude) ? ['image', 'customerId'].concat(props.exclude) : ['image', 'customerId'];

    return {
        template: `
            <div class="users-list">
                ${app.render('btnGroup', { newBtnUrl: '/users/new' })}
                ${app.render('table', {model: 'users', data: app.data.users, exclude: exclude, detailLink: '/users/{{id}}'})}
            </div>
        `
    }
};
app.components.usersNew = () => {
    var breadcrumbs = app.render('breadcrumbs', {items: [{text: 'Users', url: '/users'}, {text: 'New'}]});
    
    return {
        template: `
            <div>
                ${app.render('headingBar', {title: 'Users', breadcrumbs: breadcrumbs})}
                ${app.render('form', {model: 'users'})}
            </div>
        `
    }
};
app.routeData.users = async () => {
    app.data.users = await app.functions.get('users', app.url.params);
}

app.components.users = () => {
    var breadcrumbs = app.render('breadcrumbs', {items: [{text: 'Users'}]});
    
    return {
        template: `
            <div>
                ${app.render('headingBar', {title: 'Users', breadcrumbs: breadcrumbs})}
                ${app.render('usersList')}
            </div>
        `
    }
};
app.models.alarms = {
    fields: [{
        label: 'Name',
        name: 'name',
        type: 'text',
        type_type: 'string',
        required: true,
    },{
        label: 'Time',
        name: 'created',
        type: 'datetime',
        required: true,
    },{
        label: 'Installation',
        name: 'installation',
        type: 'relationship',
        rel_model: 'installations',
        rel_type: 'many-to-one',
        rel_display_key: 'name',
    },{
        label: 'Acknowledged By',
        name: 'ack_user',
        type: 'relationship',
        rel_model: 'users',
        rel_type: 'many-to-one',
        rel_display_key: 'first_name last_name',
    }]
};
app.models['analog-inputs'] = {
    extends: 'io',
    fields: [{
        label: 'Units',
        name: 'units',
        type: 'text',
        data_type: 'string',
        required: true,
    },{
        label: 'Input',
        name: 'input',
        type: 'number',
        data_type: 'int',
        required: true,
    },{
        label: 'PLC',
        name: 'plc',
        type: 'checkbox',
        data_type: 'boolean',
    },{
        label: 'Slot',
        name: 'slot',
        type: 'number',
        data_type: 'int'
    },{
        label: 'Sensor Type',
        name: 'sensor_type',
        type: 'select',
        options: [{
            text: 'Current',
            value: 'current'
        },{
            text: 'Voltage',
            value: 'voltage'
        },{
            text: 'Scale',
            value: 'scale'
        }],
        required: true
    },{
        label: 'Resistor',
        name: 'resistor',
        type: 'number',
        data_type: 'float'
    },{
        label: 'High Val - Calibrated',
        name: 'high_val_cal',
        type: 'number',
        data_type: 'int'
    },{
        label: 'Low Val - Calibrated',
        name: 'low_val_cal',
        type: 'number',
        data_type: 'int'
    },{
        label: 'High Val',
        name: 'high_val',
        type: 'number',
        data_type: 'int'
    },{
        label: 'Low Val',
        name: 'low_val',
        type: 'number',
        data_type: 'int'
    },{
        label: 'Offset',
        name: 'offset',
        type: 'number',
        data_type: 'int'
    },{
        label: 'Precision Level',
        name: 'precision_level',
        type: 'number',
        data_type: 'int'
    },{
        label: 'Max Display Value',
        name: 'max_display_value',
        type: 'number',
        data_type: 'int'
    },{
        label: 'Min Display Value',
        name: 'min_display_value',
        type: 'number',
        data_type: 'int'
    }]
};
app.models['analog-outputs'] = {
    extends: 'io',
    fields: [{
        label: 'Units',
        name: 'units',
        type: 'text',
        data_type: 'string',
        required: true,
    },{
        label: 'Output',
        name: 'output',
        type: 'number',
        data_type: 'int',
        required: true,
    },{
        label: 'PLC',
        name: 'plc',
        type: 'checkbox',
        data_type: 'boolean',
    },{
        label: 'Slot',
        name: 'slot',
        type: 'number',
        data_type: 'int'
    },{
        label: 'High Val',
        name: 'high_val',
        type: 'number',
        data_type: 'int'
    },{
        label: 'Low Val',
        name: 'low_val',
        type: 'number',
        data_type: 'int'
    },{
        label: 'Max Val',
        name: 'max_val',
        type: 'number',
        data_type: 'int'
    },{
        label: 'Min Val',
        name: 'min_val',
        type: 'number',
        data_type: 'int'
    }]
};
app.models.customers = {
    fields: [{
        label: 'Name',
        name: 'name',
        type: 'text',
        data_type: 'string',
        required: true,
    },{
        label: 'Distributor',
        name: 'distributor',
        type: 'relationship',
        rel_model: 'distributors',
        rel_type: 'many-to-one',
        rel_display_key: 'name',
        required: true
    }]
};
app.models.distributors = {
    fields: [{
        label: 'Name',
        name: 'name',
        type: 'text',
        data_type: 'string',
        required: true,
    }]
};
app.models.installations = {
    fields: [{
        label: 'Name',
        name: 'name',
        type: 'text',
        data_type: 'string',
        required: true,
    },{
        label: 'Has Active Alarm',
        table_header: 'Status',
        name: 'has_active_alarm',
        type: 'radio',
        data_type: 'boolean',
        options: [{
            label: 'Yes',
            value: true,
        },{
            label: 'No',
            value: false,
        }],
        disabled: true,
        table_value: (value) => {
            return (!value) ? '<i class="color-green fa fa-check"></i>' : '<i class="color-red fa fa-bell"></i>';
        }
    },{
        label: 'Address',
        name: 'address',
        type: 'text',
        data_type: 'string'
    },{
        label: 'City',
        name: 'city',
        type: 'text',
        data_type: 'string'
    },{
        label: 'State',
        name: 'state',
        type: 'text',
        data_type: 'string'
    },{
        label: 'Zip',
        name: 'zip',
        type: 'text',
        data_type: 'string'
    },{
        label: 'Latitude',
        name: 'lat',
        type: 'number',
        data_type: 'float'
    },{
        label: 'Longitude',
        name: 'lng',
        type: 'number',
        data_type: 'float'
    },{
        label: 'Signal Strength',
        name: 'signal_strength',
        type: 'number',
        disabled: true
    },{
        label: 'Signal Power',
        name: 'signal_power',
        type: 'number',
        disabled: true
    },{
        label: 'Signal Quality',
        name: 'signal_quality',
        type: 'number',
        disabled: true
    },{
        label: 'Signal to Noise Ratio',
        name: 'signal_to_noise',
        type: 'number',
        disabled: true
    },{
        label: 'Customer',
        name: 'customer',
        type: 'relationship',
        rel_model: 'customers',
        rel_type: 'many-to-one',
        rel_display_key: 'name',
        required: true
    }]
};
app.models['io-types'] = {
    fields: [{
        label: 'Name',
        name: 'name',
        type: 'text',
        data_type: 'string',
        required: true,
    },{
        label: 'Slug',
        name: 'slug',
        type: 'text',
        data_type: 'string',
        required: true,
    }]
};
app.models.io = {
    fields: [{
        label: 'Name',
        name: 'name',
        type: 'text',
        data_type: 'string',
        required: true,
    },{
        label: 'Installation',
        name: 'installation',
        type: 'relationship',
        rel_model: 'installations',
        rel_type: 'many-to-one',
        rel_display_key: 'name',
        required: true,
    }]
};
app.models.logs = {
    fields: [{
        label: 'Name',
        name: 'name',
        type: 'text',
        dataType: 'string',
        required: true,
    },{
        label: 'Time',
        name: 'created',
        type: 'datetime',
        required: true,
    },{
        label: 'Installation',
        name: 'installation',
        type: 'relationship',
        rel_model: 'installations',
        rel_type: 'many-to-one',
        rel_display_key: 'name',
    }]
};
app.models.permissions = {
    fields: [{
        label: 'Name',
        name: 'name',
        type: 'text',
        data_type: 'string',
        required: true,
    },{
        label: 'Slug',
        name: 'slug',
        type: 'text',
        data_type: 'string',
        required: true,
    }]
};
app.models.roles = {
    fields: [{
        label: 'Name',
        name: 'name',
        type: 'text',
        data_type: 'string',
        required: true,
    },{
        label: 'Slug',
        name: 'slug',
        type: 'text',
        data_type: 'string',
        required: true,
    },{
        label: 'Permissions',
        name: 'permissions',
        type: 'relationship',
        rel_model: 'permissions',
        rel_type: 'many-to-many',
        rel_display_key: 'name',
        required: true,
    }]
};
app.models.rtus = {
    fields: [{
        label: 'Name',
        name: 'name',
        type: 'text',
        data_type: 'string',
        required: true,
    },{
        label: 'UL Number',
        name: 'ul_number',
        type: 'text',
        data_type: 'string',
        required: true,
    },{
        label: 'Sales Order Number',
        name: 'sales_order_number',
        type: 'text',
        data_type: 'string',
        required: true,
    },{
        label: 'Model',
        name: 'model',
        type: 'select',
        options: [{
            text: '1100',
            value: '1100'
        },{
            text: '3100',
            value: '3100'
        }],
        data_type: 'string',
        required: true,
    },{
        label: 'Installation',
        name: 'installation',
        type: 'relationship',
        rel_model: 'installations',
        rel_type: 'one-to-one',
        rel_display_key: 'name',
    }]
};
app.models.signalStrengthReadings = {
    fields: [{
        label: 'Signal Strength', 
        name: 'signal_strength', 
        type: 'number', 
        data_type: 'int', 
        required: true
    },{
        label: 'Signal Power', 
        name: 'signal_power', 
        type: 'number', 
        data_type: 'int', 
        required: true
    },{
        label: 'Signal Quality', 
        name: 'signal_quality', 
        type: 'number', 
        data_type: 'int', 
        required: true
    },{
        label: 'Signal to Noise Ratio', 
        name: 'signal_to_noise', 
        type: 'number', 
        data_type: 'int', 
        required: true
    },{
        label: 'Installation', 
        name: 'installation', 
        type: 'relationship', 
        rel_model: 'installations',
        rel_type: 'many-to-one',
        rel_display_key: 'name',
        disabled: true
    }]
};
app.models.stackups = {
    fields: [{
        label: 'Name',
        name: 'name',
        type: 'text',
        data_type: 'string',
        required: true,
    },{
        label: 'Mac Address',
        name: 'mac_address',
        type: 'text',
        data_type: 'string',
        required: true,
    },{
        label: 'Modem Type',
        name: 'modem_type',
        type: 'select',
        options: [{
            text: 'Verizon',
            value: 'verizon'
        },{
            text: 'ATT',
            value: 'att'
        }],
        data_type: 'string',
        required: true,
    },{
        label: 'Model',
        name: 'model',
        type: 'select',
        options: [{
            text: '1100S',
            value: '1100S'
        },{
            text: '3100S',
            value: '3100S'
        }],
        data_type: 'string',
        required: true,
    },{
        label: 'RTU',
        name: 'rtu',
        type: 'relationship',
        rel_model: 'rtus',
        rel_type: 'one-to-one',
        rel_display_key: 'name',
    }]
};
app.models.users = {
    fields: [{
        label: 'Image',
        name: 'image',
        type: 'file',
        data_type: 'string',
    },{
        label: 'First Name',
        name: 'first_name',
        type: 'text',
        data_type: 'string',
        required: true,
    },{
        label: 'Last Name',
        name: 'last_name',
        type: 'text',
        data_type: 'string'
    },{
        label: 'Email',
        name: 'email',
        type: 'text',
        data_type: 'string'
    },{
        label: 'Phone',
        name: 'phone',
        type: 'text',
        data_type: 'string'
    },{
        label: 'Role',
        name: 'role',
        type: 'relationship',
        rel_type: 'many-to-one',
        rel_model: 'roles',
        rel_display_key: 'name'
    },{
        label: 'Customer',
        name: 'customer',
        type: 'relationship',
        rel_type: 'many-to-one',
        rel_model: 'customers',
        rel_display_key: 'name'
    }]
};